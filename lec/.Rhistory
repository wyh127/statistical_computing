tmp <- X %*% beta
term1 <- sum(y * tmp)
term2 <- sum(exp(tmp))
return(term2-term1)
}
pois.neg.ll(rep(0, 5))
nlm(pois.neg.ll, rep(0, 5))
glm(Y~X1+X2+X3+X4,data=glm.data,family="poisson")
train <- read.csv("finalexamtrain.csv")
head(train)
ggplot() + geom_point(train, aes(x = x, y = Y), col = "blue")
train <- read.csv("finalexamtrain.csv")
ggplot() + geom_point(train, aes(x = x, y = Y), col = "blue")
train <- read.csv("finalexamtrain.csv")
ggplot(train) + geom_point(aes(x = x, y = Y), col = "blue")
lm <- lm(Y ~ x, train)
lm1 <- lm(Y ~ poly(x, 1), train)
lm
lm1
lm1 <- lm(Y ~ x, train)
lm2 <- lm(Y ~ x + I(x^2), train)
lm3 <- lm(Y ~ x + I(x^2) + I(x^3), train)
lm4 <- lm(Y ~ x + I(x^2) + I(x^3) + I(x^4), train)
lm5 <- lm(Y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5), train)
test.error <- function(df, mod) {
y.test1 <- predict(mod, newdata = df[df$ValSet == "TestSet1", ]["x"])
pred_err1 <- mean((y.test1 - df[df$ValSet == "TestSet1", ]["Y"])^2)
y.test2 <- predict(mod, newdata = df[df$ValSet == "TestSet2", ]["x"])
pred_err2 <- mean((y.test2 - df[df$ValSet == "TestSet1", ]["Y"])^2)
y.test3 <- predict(mod, newdata = df[df$ValSet == "TestSet1", ]["x"])
pred_err3 <- mean((y.test3 - df[df$ValSet == "TestSet3", ]["Y"])^2)
y.test4 <- predict(mod, newdata = df[df$ValSet == "TestSet1", ]["x"])
pred_err4 <- mean((y.test4 - df[df$ValSet == "TestSet4", ]["Y"])^2)
return(c(y.test1, y.test2, y.test3, y.test4))
}
data.test <- read.csv("finalexamtest.csv")
head(data.test)
tail(data.test)
levels(data.test$ValSet)
test.error(data.test, lm1)
test.error <- function(df, mod) {
y.test1 <- predict(mod, newdata = df[df$ValSet == "TestSet1", ]["x"])
pred_err1 <- mean((y.test1 - df[df$ValSet == "TestSet1", ]["Y"])^2)
y.test2 <- predict(mod, newdata = df[df$ValSet == "TestSet2", ]["x"])
pred_err2 <- mean((y.test2 - df[df$ValSet == "TestSet1", ]["Y"])^2)
y.test3 <- predict(mod, newdata = df[df$ValSet == "TestSet1", ]["x"])
pred_err3 <- mean((y.test3 - df[df$ValSet == "TestSet3", ]["Y"])^2)
y.test4 <- predict(mod, newdata = df[df$ValSet == "TestSet1", ]["x"])
pred_err4 <- mean((y.test4 - df[df$ValSet == "TestSet4", ]["Y"])^2)
return(c(pred_err1, pred_err2, pred_err3, pred_err4))
}
test.error(data.test, lm1)
y.test1 <- predict(lm1, newdata = data.test[data.test$ValSet == "TestSet1", ]["x"])
pred_err1 <- mean((y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"])^2)
pred_err1
data.test[data.test$ValSet == "TestSet1", ]
data.test[data.test$ValSet == "TestSet1", ]["x"]
data.test[data.test$ValSet == "TestSet1", ]["Y"]
y.test1
y.test - data.test[data.test$ValSet == "TestSet1", ]["Y"]
y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"]
mean(y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"])
mean(y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"])
sum(y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"])
length(y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"])
mean(as.numeric(y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"]))
y.test1 <- predict(lm1, newdata = data.test[data.test$ValSet == "TestSet1", ]["x"])
pred_err1 <- mean((y.test1 - as.vector(data.test[data.test$ValSet == "TestSet1", ]["Y"]))^2)
y.test1 <- predict(lm1, newdata = data.test[data.test$ValSet == "TestSet1", ]["x"])
pred_err1 <- mean((as.vector(y.test1) - as.vector(data.test[data.test$ValSet == "TestSet1", ]["Y"]))^2)
apply((y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"])^2, 2, mean)
sum(y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"]) / nrow(y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"])
sum((y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"])^2) / nrow(y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"])
test.error <- function(df, mod) {
y.test1 <- predict(mod, newdata = df[df$ValSet == "TestSet1", ]["x"])
pred_err1 <- apply((y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"])^2, 2, mean)
y.test2 <- predict(mod, newdata = df[df$ValSet == "TestSet2", ]["x"])
pred_err2 <- apply((y.test2 - data.test[data.test$ValSet == "TestSet2", ]["Y"])^2, 2, mean)
y.test3 <- predict(mod, newdata = df[df$ValSet == "TestSet3", ]["x"])
pred_err3 <- apply((y.test3 - data.test[data.test$ValSet == "TestSet3", ]["Y"])^2, 2, mean)
y.test4 <- predict(mod, newdata = df[df$ValSet == "TestSet4", ]["x"])
pred_err4 <- apply((y.test4 - data.test[data.test$ValSet == "TestSet4", ]["Y"])^2, 2, mean)
return(c(pred_err1, pred_err2, pred_err3, pred_err4))
}
test.error(data.test, lm1)
g <- function(x, mu = 67, sigma = 4) {
return(1/(sqrt(2*pi)*sigma) * exp(-1/(2*sigma^2) * (x-mu)^2))
}
alpha <- 0.4
xr <- seq(50, 80, 0.01)
plot(xr, g(xr)/alpha, type = "l", col = "red")
lines(xr, y = f3(xr))
legend(50, 0.2, c("g", "f3"), col = c("red", "black"), pch = c(19, 19))
simu <- c()
i <- 0
while(i < 10000) {
x <- rnorm(1, 67, 4)
y <- runif(1)
if(g(x)/alpha*y < f3(x)) {
simu <- c(simu, x)
i <- i+1
}
}
hist(simu, prob = T)
hist(simu, prob = T, break = 50)
hist(simu, prob = T, breaks = 50)
hist(simu, prob = T, breaks = 50)
lines(f3(seq(55, 85, 0.01)))
hist(simu, prob = T, breaks = 100)
hist(simu, prob = T, breaks = 1000)
hist(simu, prob = T, breaks = 1000)
lines(f3(seq(55, 85, 0.01)))
hist(simu, prob = T, breaks = 1000)
lines(f3(seq(55, 85, 0.01)), col = "red")
hist(simu, prob = T, breaks = 10000)
lines(f3(seq(55, 85, 0.01)), col = "red")
hist(simu, prob = T, breaks = 100)
hist(simu, breaks = 100)
hist(simu, breaks = 100, probability = T)
hist(simu, breaks = 100, probability = T)
lines(seq(55, 85, 0.01), f3(seq(55, 85, 0.01)), col = "red")
hist(simu, probability = T)
lines(seq(55, 85, 0.01), f3(seq(55, 85, 0.01)), col = "red")
simu1 <- c()
j <- 1
k <- 1
while(i <= 10000) {
x <- rnorm(1, 67, 4)
y <- runif(1)
if(g(x)/alpha*y < f3(x)) {
simu1 <- c(simu, x)
k <- k+1
}
else {
j <- j+1
}
}
simu1 <- c()
j <- 1
k <- 1
while(k <= 10000) {
x <- rnorm(1, 67, 4)
y <- runif(1)
if(g(x)/alpha*y < f3(x)) {
simu1 <- c(simu, x)
k <- k+1
}
else {
j <- j+1
}
}
j/(j+k)
test.error <- function(df) {
y.test1 <- predict(lm1, newdata = df["x"])
pred_err1 <- apply((y.test1 - df["Y"])^2, 2, mean)
y.test2 <- predict(lm2, newdata = df["x"])
pred_err2 <- apply((y.test2 - df["Y"])^2, 2, mean)
y.test3 <- predict(lm3, newdata = df["x"])
pred_err3 <- apply((y.test3 - df["Y"])^2, 2, mean)
y.test4 <- predict(lm4, newdata = df["x"])
pred_err4 <- apply((y.test4 - df["Y"])^2, 2, mean)
y.test5 <- predict(lm5, newdata = df["x"])
pred_err5 <- apply((y.test5 - df["Y"])^2, 2, mean)
# y.test2 <- predict(mod, newdata = df[df$ValSet == "TestSet2", ]["x"])
# pred_err2 <- apply((y.test2 - data.test[data.test$ValSet == "TestSet2", ]["Y"])^2, 2, mean)
#
# y.test3 <- predict(mod, newdata = df[df$ValSet == "TestSet3", ]["x"])
# pred_err3 <- apply((y.test3 - data.test[data.test$ValSet == "TestSet3", ]["Y"])^2, 2, mean)
#
# y.test4 <- predict(mod, newdata = df[df$ValSet == "TestSet4", ]["x"])
# pred_err4 <- apply((y.test4 - data.test[data.test$ValSet == "TestSet4", ]["Y"])^2, 2, mean)
return(pred_err1, pred_err2, pred_err3, pred_err4, pred_err5)
}
library("plyr")
daply(data.test, .ValSet, test.error)
library("plyr")
daply(data.test, "ValSet", test.error)
test.error <- function(df) {
y.test1 <- predict(lm1, newdata = df["x"])
pred_err1 <- apply((y.test1 - df["Y"])^2, 2, mean)
y.test2 <- predict(lm2, newdata = df["x"])
pred_err2 <- apply((y.test2 - df["Y"])^2, 2, mean)
y.test3 <- predict(lm3, newdata = df["x"])
pred_err3 <- apply((y.test3 - df["Y"])^2, 2, mean)
y.test4 <- predict(lm4, newdata = df["x"])
pred_err4 <- apply((y.test4 - df["Y"])^2, 2, mean)
y.test5 <- predict(lm5, newdata = df["x"])
pred_err5 <- apply((y.test5 - df["Y"])^2, 2, mean)
# y.test2 <- predict(mod, newdata = df[df$ValSet == "TestSet2", ]["x"])
# pred_err2 <- apply((y.test2 - data.test[data.test$ValSet == "TestSet2", ]["Y"])^2, 2, mean)
#
# y.test3 <- predict(mod, newdata = df[df$ValSet == "TestSet3", ]["x"])
# pred_err3 <- apply((y.test3 - data.test[data.test$ValSet == "TestSet3", ]["Y"])^2, 2, mean)
#
# y.test4 <- predict(mod, newdata = df[df$ValSet == "TestSet4", ]["x"])
# pred_err4 <- apply((y.test4 - data.test[data.test$ValSet == "TestSet4", ]["Y"])^2, 2, mean)
return(c(pred_err1, pred_err2, pred_err3, pred_err4, pred_err5))
}
library("plyr")
daply(data.test, "ValSet", test.error)
dlply(data.test, "ValSet", test.error)
res <- dlply(data.test, "ValSet", test.error)
res <- dlply(data.test, "ValSet", test.error)
plot(1:5, res[[1]])
points(1:5, res[[2]])
points(1:5, res[[3]])
points(1:5, res[[4]])
points(1:5, test.error(train))
plot(1:5, res[[1]], type = "l")
lines(1:5, res[[2]])
lines(1:5, res[[3]])
lines(1:5, res[[4]])
lines(1:5, test.error(train))
plot(1:5, res[[1]], type = "l", ylim = c(2000, 3600))
lines(1:5, res[[2]])
lines(1:5, res[[3]])
lines(1:5, res[[4]])
lines(1:5, test.error(train))
plot(1:5, res[[1]], type = "l", ylim = c(0, 3600))
lines(1:5, res[[2]])
lines(1:5, res[[3]])
lines(1:5, res[[4]])
lines(1:5, test.error(train))
plot(1:5, res[[1]], type = "l", ylim = c(1000, 3600))
lines(1:5, res[[2]])
lines(1:5, res[[3]])
lines(1:5, res[[4]])
lines(1:5, test.error(train))
plot(1:5, res[[1]], type = "l", ylim = c(1500, 3600))
lines(1:5, res[[2]])
lines(1:5, res[[3]])
lines(1:5, res[[4]])
lines(1:5, test.error(train))
plot(1:5, res[[1]], type = "l", ylim = c(1500, 3600), ylab = "error", xlab = "degree")
lines(1:5, res[[2]])
lines(1:5, res[[3]])
lines(1:5, res[[4]])
lines(1:5, test.error(train))
ddply(data.test, "ValSet", test.error)
res <- ddply(data.test, "ValSet", test.error)
res <- apply(res[2:6], 2, mean)
plot(1:5, res, type = "l", ylim = c(1500, 3600), ylab = "error", xlab = "degree")
lines(1:5, test.error(train))
plot(1:5, res, type = "l", ylim = c(2000, 3600), ylab = "error", xlab = "degree")
lines(1:5, test.error(train))
library("ggplot2")
?geom_line
ggplot() + geom_line(aes(x = seq(-3, 3), y = dnorm(seq(-3, 3))))
ggplot() + geom_line(aes(x = seq(-3, 3, 100), y = dnorm(seq(-3, 3, 100))))
?seq
ggplot() + geom_line(aes(x = seq(-3, 3, 0.01), y = dnorm(seq(-3, 3, 0.01))))
del <- 0.5
rg <- seq(60, 80, 0.01)
ggplot() + geom_line(aes(x = rg, y = dnorm(rg, 70, 3), color = 1)) +
+ geom_line(aes(x = rg, y = dnorm(rg, 65, 2.5), col = 2)) +
+ geom_line(aes(x = rg, y = del*dnorm(rg, 70, 3) + (1-del)*dnorm(rg, 70, 3), col = 3))
ggplot() + geom_line(aes(x = rg, y = dnorm(rg, 70, 3), color = 1))
ggplot() + geom_line(aes(x = rg, y = dnorm(rg, 70, 3), color = 1)) +
+ geom_line(aes(x = rg, y = dnorm(rg, 65, 2.5), col = 2))
ggplot() + geom_line(aes(x = rg, y = dnorm(rg, 70, 3), color = 1)) +
+ geom_line(aes(y = dnorm(rg, 65, 2.5), col = 2))
ggplot() + geom_line(aes(x = rg, y = dnorm(rg, 70, 3), color = 1)) +
+ geom_line(aes(x = rg, y = dnorm(rg, 65, 2.5)))
ggplot() + geom_line(aes(x = rg, y = dnorm(rg, 70, 3), color = 1)) +
+ geom_line(aes(x = rg, y = dnorm(rg, 65, 2.5), color = 2))
ggplot() + geom_line(aes(x = rg, y = dnorm(rg, 70, 3), color = 1)) +
geom_line(aes(x = rg, y = dnorm(rg, 65, 2.5), color = 2)) +
geom_line(aes(x = rg, y = del*dnorm(rg, 70, 3) + (1-del)*dnorm(rg, 70, 3), color = 3))
ggplot() + geom_line(aes(x = rg, y = dnorm(rg, 70, 3), color = 1)) +
geom_line(aes(x = rg, y = dnorm(rg, 65, 2.5), color = 2)) +
geom_line(aes(x = rg, y = del*dnorm(rg, 70, 3) + (1-del)*dnorm(rg, 65, 2.5), color = 3))
ggplot() + geom_line(aes(x = rg, y = dnorm(rg, 70, 3), color = "1")) +
geom_line(aes(x = rg, y = dnorm(rg, 65, 2.5), color = "2")) +
geom_line(aes(x = rg, y = del*dnorm(rg, 70, 3) + (1-del)*dnorm(rg, 65, 2.5), color = "3"))
ggplot() + geom_line(aes(x = rg, y = dnorm(rg, 70, 3), color = "1")) +
geom_line(aes(x = rg, y = dnorm(rg, 65, 2.5), color = "2")) +
geom_line(aes(x = rg, y = del*dnorm(rg, 70, 3) + (1-del)*dnorm(rg, 65, 2.5), color = "3")) +
labs(ylab = "density", title="normals")
ggplot() + geom_line(aes(x = rg, y = dnorm(rg, 70, 3), color = "1")) +
geom_line(aes(x = rg, y = dnorm(rg, 65, 2.5), color = "2")) +
geom_line(aes(x = rg, y = del*dnorm(rg, 70, 3) + (1-del)*dnorm(rg, 65, 2.5), color = "3")) +
labs(y = "density", title="normals")
ggplot() + geom_line(aes(x = rg, y = dnorm(rg, 70, 3), color = "1")) +
geom_line(aes(x = rg, y = dnorm(rg, 65, 2.5), color = "2")) +
geom_line(aes(x = rg, y = del*dnorm(rg, 70, 3) + (1-del)*dnorm(rg, 65, 2.5), color = "3")) +
labs(y = "density", title="normals") +
theme(legend.title = "functions")
ggplot() + geom_line(aes(x = rg, y = dnorm(rg, 70, 3), color = "1")) +
geom_line(aes(x = rg, y = dnorm(rg, 65, 2.5), color = "2")) +
geom_line(aes(x = rg, y = del*dnorm(rg, 70, 3) + (1-del)*dnorm(rg, 65, 2.5), color = "3")) +
labs(y = "density", title="normals") +
scale_fill_discrete(name = "functions")
ggplot(data = df) + geom_line(aes(x = x, y = y1, col = "f1")) +
geom_line(aes(x = x, y = y2, col = "f2")) +
geom_line(aes(x = x, y = y3, col = "f3")) +
labs(y = "density", color = "functions")
ggplot() + geom_line(aes(x = rg, y = dnorm(rg, 70, 3), color = "1")) +
geom_line(aes(x = rg, y = dnorm(rg, 65, 2.5), color = "2")) +
geom_line(aes(x = rg, y = del*dnorm(rg, 70, 3) + (1-del)*dnorm(rg, 65, 2.5), color = "3")) +
labs(y = "density", title="normals", color = "functions")
head(glm.data)
pois.neg.ll1 <- function(beta, y = glm.data[, 1], X=cbind(rep(1, nrow(glm.data)), glm.data[, c(2:5)])) {
lin_term <- X %*% beta
l <- exp(lin_term)
return(-sum(dpois(y, lambda = l, log = T)))
}
pois.neg.ll1(rep(0, 5))
pois.neg.ll1 <- function(beta, y = glm.data[, 1], X=cbind(rep(1, nrow(glm.data)), glm.data[, c(2:5)])) {
lin_term <- as.matrix(X) %*% beta
l <- exp(lin_term)
return(-sum(dpois(y, lambda = l, log = T)))
}
pois.neg.ll1(rep(0, 5))
pois.neg.ll(rep(0, 5))
pois.neg.ll1 <- function(beta, y = glm.data[, 1], X=cbind(rep(1, nrow(glm.data)), glm.data[, c(2:5)])) {
lin_term <- as.matrix(X) %*% beta
l <- exp(lin_term)
return(-sum(dpois(y, lambda = l, log = T)))
}
pois.neg.ll1(rep(0, 5))
nlm(pois.neg.ll1, rep(0, 5))
library(numDeriv)
grad.descent <- function(f, x0, max.iter = 200, step.size = 0.05, stopping.deriv = 0.01, ...) {
n    <- length(x0)
xmat <- matrix(0, nrow = n, ncol = max.iter)
xmat[,1] <- x0
for (k in 2:max.iter) {
# Calculate the gradient
grad.cur <- grad(f, xmat[ ,k-1], ...)
# Should we stop?
if (all(abs(grad.cur) < stopping.deriv)) {
k <- k-1; break
}
# Move in the opposite direction of the grad
xmat[ ,k] <- xmat[ ,k-1] - step.size * grad.cur
}
xmat <- xmat[ ,1:k] # Trim
return(list(x = xmat[,k], xmat = xmat, k = k))
}
grad.descent(pois.neg.ll1, rep(0, 5))
grad.descent(pois.neg.ll1, rep(0, 5), step.size = 0.001)
grad.descent(pois.neg.ll1, rep(0, 5), step.size = 0.0001)
grad.descent(pois.neg.ll1, rep(0, 5), step.size = 0.00001)
library(numDeriv)
Newton.method <- function(f, x0, max.iter = 200, stopping.deriv = 0.001, ...) {
n <- length(x0)
xmat <- matrix(0, nrow = n, ncol = max.iter)
xmat[,1] <- x0
for (k in 2:max.iter) {
# Calculate the gradient
grad.cur <- grad(f, xmat[ ,k-1], ...)
# Calculate the hessian
hess.cur <- hessian(f, xmat[ ,k-1], ...)
# Should we stop?
if (all(abs(grad.cur) < stopping.deriv)) {
k <- k-1; break
}
# Move in the opposite direction of the grad
xmat[ ,k] <- xmat[ ,k-1] - solve(hess.cur)%*%grad.cur
}
xmat <- xmat[ ,1:k] # Trim
return(list(x = xmat[,k],
xmat = xmat,
k = k,
minimum=f(xmat[,k],...)
)
)
}
Newton.method(pois.neg.ll1, rep(0, 5))
ggplot(train) + geom_point(aes(x = x, y = Y), col = "blue")
test.error(data.test)
test.error(data.test)
head(data.test)
test.error <- function(df) {
y.test1 <- predict(lm1, newdata = df["x"])
pred_err1 <- apply((y.test1 - df["Y"])^2, 2, mean)
y.test2 <- predict(lm2, newdata = df["x"])
pred_err2 <- apply((y.test2 - df["Y"])^2, 2, mean)
y.test3 <- predict(lm3, newdata = df["x"])
pred_err3 <- apply((y.test3 - df["Y"])^2, 2, mean)
y.test4 <- predict(lm4, newdata = df["x"])
pred_err4 <- apply((y.test4 - df["Y"])^2, 2, mean)
y.test5 <- predict(lm5, newdata = df["x"])
pred_err5 <- apply((y.test5 - df["Y"])^2, 2, mean)
# y.test2 <- predict(mod, newdata = df[df$ValSet == "TestSet2", ]["x"])
# pred_err2 <- apply((y.test2 - data.test[data.test$ValSet == "TestSet2", ]["Y"])^2, 2, mean)
#
# y.test3 <- predict(mod, newdata = df[df$ValSet == "TestSet3", ]["x"])
# pred_err3 <- apply((y.test3 - data.test[data.test$ValSet == "TestSet3", ]["Y"])^2, 2, mean)
#
# y.test4 <- predict(mod, newdata = df[df$ValSet == "TestSet4", ]["x"])
# pred_err4 <- apply((y.test4 - data.test[data.test$ValSet == "TestSet4", ]["Y"])^2, 2, mean)
return(c(pred_err1, pred_err2, pred_err3, pred_err4, pred_err5))
}
test.error(data.test)
lm5
lm4
lm1
lm
lm2
head(data.test)
test.error(data.train)
test.error(train)
ddply(data.test, "ValSet", test.error)
library("plyr")
ddply(data.test, "ValSet", test.error)
df_plyr <- ddply(data.test, "ValSet", test.error)
res
ggplot() + geom_line(aes(x=1:5, y = res)) +
geom_line(aes(x = 1:5, y = test.error(train)))
ggplot() + geom_line(aes(x=1:5, y = res, color = "test error")) +
geom_line(aes(x = 1:5, y = test.error(train), color = "train error")) +
labs(y = "error", color = "error")
ggplot() + geom_point(aes(x=1:5, y = res, color = "test")) +
geom_line(aes(x = 1:5, y = test.error(train), color = "train")) +
labs(y = "error", color = "error")
ggplot() + geom_line(aes(x=1:5, y = res, color = "test")) +
geom_line(aes(x = 1:5, y = test.error(train), color = "train")) +
labs(y = "error", color = "error")
ggplot() + geom_line(aes(x=1:5, y = res, color = "test")) +
geom_point(aes(x=1:5, y = res, color = "test")) +
geom_line(aes(x = 1:5, y = test.error(train), color = "train")) +
labs(y = "error", color = "error")
ggplot() + geom_line(aes(x=1:5, y = res, color = "test")) +
geom_point(aes(x=1:5, y = res, color = "test")) +
geom_line(aes(x = 1:5, y = test.error(train), color = "train")) +
geom_ponit(aes(x = 1:5, y = test.error(train), color = "train"))
ggplot() + geom_line(aes(x=1:5, y = res, color = "test")) +
geom_point(aes(x=1:5, y = res, color = "test")) +
geom_line(aes(x = 1:5, y = test.error(train), color = "train")) +
geom_point(aes(x = 1:5, y = test.error(train), color = "train"))
labs(y = "error", color = "error")
setwd("~/Desktop/semester_1/4.StatisticalComputing/lec")
diamonds <- read.csv("diamonds.csv",as.is=T)
diamonds$color <- factor(diamonds$color, level=c("J","I","H","G","F","E","D"))
head(diamonds)
library(ggplot2)
?geom_boxplot
ggplot() + geom_boxplot(data = diamonds, aes(x = color, y = price))
dia_col <- split(diamonds$price, color)
?split
dia_col <- split(diamonds, color)
diamonds$price
dia_col <- split(diamonds$price, diamonds["color"]")
v
xs
)
)
()
!
@
``
/
''
""
dia_col <- split(diamonds$price, diamonds["color"])
sapply(dia_col, median)
dia_col <- split(diamonds$price, diamonds$color)
sapply(dia_col, median)
library(plyr)
head(diamonds)
cbind(diamonds, large = ifelse(diamonds$carat >= 2, "yes", "no"))
library(plyr)
diamonds <- cbind(diamonds, large = ifelse(diamonds$carat >= 2, "yes", "no"))
sum(diamonds$large == "yes")
daply(diamonds, .(color, large), median)
daply(diamonds$price, .(color, large), median)
daply(diamonds, .(color, large), function(x) {return(median(df$price))})
daply(diamonds, .(color), function(x) {return(median(df$price))})
daply(diamonds, .(color), summary)
daply(diamonds, .(color, large), summary)
daply(diamonds, .(color, large), function(x) median(x$price))
ggplot() + geom_boxplot(data = diamonds, aes(x = color, y = price)) +
facet_wrap(~ large)
lm_tmp <- function(df) {
return(coef(lm(price~carat, df))[2])
}
daply(diamonds, .(color), lm_tmp)
lm_tmp <- function(df) {
return(lm(price~carat, df))
}
daply(diamonds, .(color), lm_tmp)
lm_tmp <- function(df) {
return(lm(price~carat, df))
}
dlply(diamonds, .(color), lm_tmp)
lm_tmp <- function(df) {
return(coef(lm(price~carat, df)))
}
ddply(diamonds, .(color), lm_tmp)
?geom_smooth
ggplot() + geom_smooth(data = ddply(diamonds, .(color, large), function(df) median(df$price)), aes(carat, price))
ggplot() + geom_smooth(split(diamonds, "color"), aes(carat, price))
split(diamonds, "color")
ddply(diamonds, .(color), lm_tmp)
ggplot(data = diamonds) + geom_smooth(aes(carat, price)) +
facet_wrap(~ color)
ggplot(data = diamonds) + geom_smooth(aes(carat, price), method = "lm") +
facet_wrap(~ color)
ggplot(data = diamonds) + geom_smooth(aes(carat, price), method = "lm", color = color) +
facet_wrap(~ color)
ggplot(data = diamonds) + geom_smooth(aes(carat, price), method = "lm", color = "color") +
facet_wrap(~ color)
ggplot(data = diamonds) + geom_smooth(aes(carat, price), method = "lm") +
Geom_point(aes(carat, price)) +
facet_wrap(~ color)
ggplot(data = diamonds) + geom_smooth(aes(carat, price), method = "lm") +
geom_point(aes(carat, price)) +
facet_wrap(~ color)
ggplot(data = diamonds) + geom_point(aes(carat, price)) +
geom_smooth(aes(carat, price), method = "lm") +
facet_wrap(~ color)
