F_stat
anova(reg)
R2 <- anova(reg)[1, 2] / (anova(reg)[1, 2] + anova(reg)[2, 2])
r <- sqrt(R2)
r
reg
3.588/49.406
sqrt(0.07262276)
plastic <- read.table("CH01PR22.txt")
names(plastic) <- c("Y", "X")
reg_1 <- lm(Y~X, data = plastic)
anova(reg_1)
coe_1 <- summary(reg_1)$coefficients
F_1 <- (coe_1[2, 1]/coe_1[2, 2])^2
P_1 <- 1-pf(F_1, 1, 14)
P_1 < 0.01
R2_1 <- anova(reg_1)[1, 2] / (anova(reg_1)[1, 2] + anova(reg_1)[2, 2])
r_1 <- sqrt(R2_1)
?rnorm
set.seed(1)
err <- rnorm(5, 0, 5)
X <- seq(4, 20, 4)
Y <- 4*X + 20 + err
reg_2 <- lm(Y~X)
reg_2
X_h <- data.frame(X = 10)
predict(reg_2, X_h, se.fit = TRUE, interval = "confidence", level = 0.95)
sqrt(0.125)
b1 <- c()
CIs <- list()
for (i in 1:200) {
set.seed(i)
err <- rnorm(5, 0, 5)
X <- seq(4, 20, 4)
Y <- 4*X + 20 + err
reg <- lm(Y~X)
ce <- summary(reg)$coefficients
b1[i] <- ce[2, 1]
pre <- predict(reg_1, x_h, se.fit = TRUE, interval = "confidence", level = 0.95)$fit
CIs[[i]] <- c(pre[2], pre[3])
}
b1 <- c()
CIs <- list()
for (i in 1:200) {
set.seed(i)
err <- rnorm(5, 0, 5)
X <- seq(4, 20, 4)
Y <- 4*X + 20 + err
reg <- lm(Y~X)
ce <- summary(reg)$coefficients
b1[i] <- ce[2, 1]
pre <- predict(reg_1, X_h, se.fit = TRUE, interval = "confidence", level = 0.95)$fit
CIs[[i]] <- c(pre[2], pre[3])
}
sd(b1)
b1 <- c()
CIs <- list()
for (i in 1:200) {
err <- rnorm(5, 0, 5)
X <- seq(4, 20, 4)
Y <- 4*X + 20 + err
reg <- lm(Y~X)
ce <- summary(reg)$coefficients
b1[i] <- ce[2, 1]
pre <- predict(reg_1, X_h, se.fit = TRUE, interval = "confidence", level = 0.95)$fit
CIs[[i]] <- c(pre[2], pre[3])
}
sd(b1)
X
var(X)
sd(X)
X
for (i in 1:2000) {
set.seed(i)
err <- rnorm(5, 0, 5)
X <- seq(4, 20, 4)
Y <- 4*X + 20 + err
reg <- lm(Y~X)
ce <- summary(reg)$coefficients
b1[i] <- ce[2, 1]
pre <- predict(reg_1, X_h, se.fit = TRUE, interval = "confidence", level = 0.95)$fit
CIs[[i]] <- c(pre[2], pre[3])
}
sd(b1)
summary(reg_2)
b1
mean(b1)
p = 0
for(i in 1:200) {
if(60 >= CIs[[i]][1] && 60 <= CIs[[i]][2]) {
p = p + 1;
}
}
p / 200
p = 0
for(i in 1:200) {
if(60 >= CIs[[i]][1] && 60 <= CIs[[i]][2]) {
p = p + 1;
}
}
p / 200
b1 <- c()
CIs <- list()
for (i in 1:200) {
set.seed(i)
err <- rnorm(5, 0, 5)
X <- seq(4, 20, 4)
Y <- 4*X + 20 + err
reg <- lm(Y~X)
ce <- summary(reg)$coefficients
b1[i] <- ce[2, 1]
pre <- predict(reg_1, X_h, se.fit = TRUE, interval = "confidence", level = 0.95)$fit
CIs[[i]] <- c(pre[2], pre[3])
}
p = 0
for(i in 1:200) {
if(60 >= CIs[[i]][1] && 60 <= CIs[[i]][2]) {
p = p + 1;
}
}
p / 200
CIs
b1 <- c()
CIs <- list()
for (i in 1:200) {
set.seed(i)
err <- rnorm(5, 0, 5)
X <- seq(4, 20, 4)
Y <- 4*X + 20 + err
reg <- lm(Y~X)
ce <- summary(reg)$coefficients
b1[i] <- ce[2, 1]
pre <- predict(reg, X_h, se.fit = TRUE, interval = "confidence", level = 0.95)$fit
CIs[[i]] <- c(pre[2], pre[3])
}
p = 0
for(i in 1:200) {
if(60 >= CIs[[i]][1] && 60 <= CIs[[i]][2]) {
p = p + 1;
}
}
p / 200
ggplot(plastic, aes(y = Y - predict(reg_1), x = X)) + geom_point() + ylim(c(-25, 25))
library(ggplot2)
ggplot(plastic, aes(y = Y - predict(reg_1), x = X)) + geom_point() + ylim(c(-25, 25))
head(iris)
Versicolor <- ifelse(iris$Species == 'versicolor', 1, 0)
Versicolor
table
table(Versicolor)
3^3
knitr::opts_chunk$set(echo = TRUE)
n <- 100
x1 <- runif(n, min = 0, max = 2)
x2 <- runif(n, min = 0, max = 2)
cnt <- 0
for (i in 1:n) {
if((x1+x2>2) && (x1^2+x2^2<4)) {
cnt = cnt + 1
}
}
area_hat <- cnt / n
area_hat
x1
for (i in 1:n) {
if((x1+x2>2) && (x1^2+x2^2<4)) {
cnt = cnt + 1
}
}
cnt
x2
x1+x2>2
for (i in 1:n) {
if((x1+x2>2) & (x1^2+x2^2<4)) {
cnt += 1
for (i in 1:n) {
if((x1+x2>2) & (x1^2+x2^2<4)) {
cnt = cnt + 1
}
}
for (i in 1:n) {
if((x1+x2>2) & (x1^2+x2^2<4)) {
cnt <- cnt + 1
}
}
for (i in 1:n) {
if((x1[i]+x2[i]>2) & (x1[i]^2+x2[i]^2<4)) {
cnt <- cnt + 1
}
}
area_hat <- cnt / n
area_hat
pi
pi-2
n <- 100000
x1 <- runif(n, min = 0, max = 2)
x2 <- runif(n, min = 0, max = 2)
cnt <- 0
for (i in 1:n) {
if((x1[i]+x2[i]>2) & (x1[i]^2+x2[i]^2<4)) {
cnt <- cnt + 1
}
}
area_hat <- cnt / n
area_hat
area_hat * 4
?plot
sapply(c(1, 2), mean)
sapply(c(1, 2), mean(x))
sapply(c(1, 2), function(x) return mean(x))
sapply(c(1, 2), function(x) mean(x))
mean(1:2)
apply(c(1, 2), mean)
apply(c(1, 2), 1, mean)
apply(c(c(2, 3), c(2, 4)), 1, mean)
sapply(c(c(2, 3), c(2, 4)), 1, mean)
sapply(c(c(2, 3), c(2, 4)), mean)
c(c(2, 3), c(2, 4))
library(plyr)
array(c(1:16), dim=c(2, 2, 2, 2))
array(c(1:16), dim=c(1))
array(c(1:16), dim=c(2, 2))
array(c(1:16), dim=c(2, 3))
array(c(1:16), dim=c(16))
?I
setwd("~/Desktop/mid_2018")
apps<-read.csv("apps.csv", header = T)
apps$Reviews<-as.numeric(apps$Reviews)
apps$Installs<-factor(apps$Installs, level= c("1+", "5+", "10+", "50+", "100+", "500+", "1,000+", "5,000+", "10,000+", "50,000+", "100,000+", "500,000+", "1,000,000+","5,000,000+","10,000,000+","50,000,000+", "100,000,000+", "500,000,000+", "1,000,000,000+"))
head(apps)
dim(apps)
summary(apps)
sum_app <- list(summary(apps))
sum_app
lapply(apps, summary)
?plot
cat_split <- split(apps, apps$Category)
str(cat_split)
mode(cat_split)
length(cat_split)
?par
rat_plot <- function(df) {
plot(df$Price, df$Rating)
}
par(3, 11)
par(mfrow = c(3, 11))
sapply(cat_split, rat_plot)
inst_split <- split(apps, apps$Installs)
plot(inst_split)
box_plt <- function(df) {
boxplot(df$Rating)
}
sapply(inst_split, box_plt)
par(mfrow = c(4, 5))
sapply(inst_split, box_plt)
sapply(inst_split, box_plt)
rollCall274<-readLines("Roll_Call_274.xml")
length(rollCall274)
grep(rollCall274, '<recorded-vote>')
pat <- '<recorded-vote>'
grep(rollCall274, pat)
grep(pat, rollCall274)
length(grep(pat, rollCall274))
rollCall274[grep(pat, rollCall274)]
substring(id, 10, 20)
id <- rollCall274[grep(pat, rollCall274)]
substring(id, 10, 20)
substring(id, 20, 30)
substring(id, 10, 30)
substring(id, 10, 40)
substring(id, 35, 50)
substring(id, 37, 49)
substring(id, 37, 43)
strikes<-read.csv("strikes.csv", header = T)
italy.strikes<-strikes[strikes$country == "Italy", ]
dim(italy.strikes)
lm.fit<- lm(strike.volume ~ left.parliament, data = italy.strikes)
round(lm.fit$coefficients,3)
pat2 <- "unaccented-name=\".\""
grep(pat2, rollCall274)
pat2 <- "unaccented-name=\".+\""
grep(pat2, rollCall274)
lines <- rollCall274[grep(pat, rollCall274)]
regmatches(lines, regexpr(pattern, string))
regmatches(lines, regexpr(pat2, lines))
pat2 <- "unaccented-name=\".+\" "
regmatches(lines, regexpr(pat2, lines))
pat2 <- "unaccented-name=\".+\" party"
regmatches(lines, regexpr(pat2, lines))
pat2 <- "unaccented-name=\".+\" "
regmatches(lines, regexpr(pat2, lines))
pat2 <- "unaccented-name=\".+\" party"
regmatches(lines, regexpr(pat2, lines))
names <- regmatches(lines, regexpr(pat2, lines))
substring(names, 10, nchar(names)-4)
substring(names, 16, nchar(names)-2)
substring(names, 17, nchar(names)-7)
substring(names, 18, nchar(names)-6)
substring(names, 18, nchar(names)-7)
lines <- grep(pat, rollCall274)
pat1 <- "name-id=\"[A-Z][0-9]{6}\""
id <- regmatches(lines, regexpr(pat1, lines))
id
regmatches(lines, regexpr(pat1, lines))
lines <- grep(pat, rollCall274)
lines
lines <- rollCall274[grep(pat, rollCall274)]
pat1 <- "name-id=\"[A-Z][0-9]{6}\""
id <- regmatches(lines, regexpr(pat1, lines))
id
substring(id, 7, nchar(id)-3)
substring(id, 8, nchar(id)-1)
substring(id, 10, nchar(id)-1)
pat3 <- "party=\"[A-Z]\""
party <- regmatches(lines, regexpr(pat3, lines))
party
substring(party, 7, nchar(party)-1)
substring(party, 8, nchar(party)-1)
pat4 <- "state=\"[A-Z]+\""
state <- regmatches(lines, regexpr(pat4, lines))
substring(state, 8, nchar(state)-1)
substring(state, 7, nchar(state)-1)
substring(state, 8, nchar(state)-1)
pat5 <- "<vote>[A-z]</vote>"
vote <- regmatches(lines, regexpr(pat5, lines))
substring(vote, 8, nchar(vote)-1)
pat5 <- "<vote>[A-z]+</vote>"
vote <- regmatches(lines, regexpr(pat5, lines))
substring(vote, 1, nchar(vote)-1)
substring(vote, 6, nchar(vote)-5)
substring(vote, 7, nchar(vote)-6)
substring(vote, 7, nchar(vote)-7)
vote <- substring(vote, 7, nchar(vote)-7)
vote <- factor(vote)
levels(vote)
numeric.vote <- ifelse(vote == 'Aye', 0, 1)
italy.strikes
n <- nrow(italy.strikes)
B <- 100
resampled_values <- matrix(NA, nrow = B, ncol = n)
for (b in 1:B) {
resampled_values[b, ] <- sample(1:n, n, replace = TRUE)
}
resampled_ests <- matrix(NA, nrow = B, ncol = 2)
colnames(resampled_ests) <- c("Intercept_Est", "Slope_Est")
for (b in 1:B) {
resampled_ests[b, ] <- coef(lm(strike.volum ~ left.parliament, italy.strikes[resampled_values[b, ], ]))
}
for (b in 1:B) {
resampled_ests[b, ] <- coef(lm(strike.volume ~ left.parliament, italy.strikes[resampled_values[b, ], ]))
}
head(resampled_ests)
var(resampled_ests[, "Slope_Est"])
?var
Cl_1 <- quantile(resampled_ests[, "Slope_Est"], 0.025)
Cu_1 <- quantile(resampled_ests[, "Slope_Est"], 0.975)
int_1 <- c(Cl_1, Cu_1)
int_1
lapply(apps, summary)
inst_split <- split(apps, apps$Installs)
box_plt <- function(df) {
boxplot(df$Rating)
}
sapply(inst_split, box_plt)
sapply(inst_split, box_plt)
cat_split <- split(apps, apps$Category)
rat_plot <- function(df) {
plot(df$Price, df$Rating)
}
par(mfrow = c(3, 11))
sapply(cat_split, rat_plot)
cat_split <- split(apps, apps$Category)
rat_plot <- function(df) {
plot(df$Price, df$Rating)
}
par(mfrow = c(3, 11))
sapply(cat_split, rat_plot)
library(plyr)
l_lyr(cat_split, rat_plot)
d_lyr(cat_split, rat_plot)
d_ply(cat_split, rat_plot)
?d_ply
d_ply(cat_split, .(Price, Rating), plot)
d_ply(cat_split, .(Price, Rating), plot)
library(plyr)
d_ply(cat_split, .(Price, Rating), plot)
cat_split
d_ply(apps, .(Category), rat_plot)
par(mfrow = c(3, 11))
library(plyr)
d_ply(apps, .(Category), rat_plot)
par(mfrow = c(3, 11))
d_ply(apps, .(Category), rat_plot)
par(mfrow = c(3, 11))
d_ply(apps, .(Category), rat_plot)
par(mfrow = c(3, 11), mar = c(4, 4, 1, 1))
d_ply(apps, .(Category), rat_plot)
par(mfrow = c(3, 11))
d_ply(apps, .(Category), rat_plot)
pat1 <- "name-id=\"[A-Z][0-9]{6}\""
id <- regmatches(lines, regexpr(pat1, lines))
id <- substring(id, 10, nchar(id)-1)
id
pat2 <- "unaccented-name=\".+\" party"
names <- regmatches(lines, regexpr(pat2, lines))
names <- substring(names, 18, nchar(names)-7)
pat3 <- "party=\"[A-Z]\""
party <- regmatches(lines, regexpr(pat3, lines))
party <- substring(party, 8, nchar(party)-1)
pat4 <- "state=\"[A-Z]+\""
state <- regmatches(lines, regexpr(pat4, lines))
state <- substring(state, 8, nchar(state)-1)
pat5 <- "<vote>[A-z]+</vote>"
vote <- regmatches(lines, regexpr(pat5, lines))
vote <- substring(vote, 7, nchar(vote)-7)
vote <- factor(vote)
levels(vote)
numeric.vote <- ifelse(vote == 'Aye', 0, 1)
pat2 <- "unaccented-name=\".+\" party"
name <- regmatches(lines, regexpr(pat2, lines))
name <- substring(name, 18, nchar(name)-7)
rollCall274 <- data.frame(name, state, party, vote, numeric.vote)
length(numeric.vote)
numme
length(numeric.vote)
length(vote)
pat5 <- "<vote>[A-z]+</vote>"
vote <- regmatches(lines, regexpr(pat5, lines))
vote <- substring(vote, 7, nchar(vote)-7)
length(vote)
regexpr(pat5, lines)
lines[26]
pat5 <- "<vote>[A-z]+|Not Voting</vote>"
regexpr(pat5, lines)
pat5 <- "<vote>([A-z]+)|(Not Voting)</vote>"
regexpr(pat5, lines)
vote <- substring(vote, 7, nchar(vote)-7)
vote
pat5 <- "<vote>[A-z]+|([A-z]+ [A-z]+)</vote>"
regexpr(pat5, lines)
vote <- regmatches(lines, regexpr(pat5, lines))
vote <- substring(vote, 7, nchar(vote)-7)
vote
pat5 <- "<vote>([A-z]+)|([A-z]+ [A-z]+)</vote>"
vote <- regmatches(lines, regexpr(pat5, lines))
vote <- substring(vote, 7, nchar(vote)-7)
vote
vote <- regmatches(lines, regexpr(pat5, lines))
vote
pat5 <- "<vote>([A-z]+)</vote>"
vote <- regmatches(lines, regexpr(pat5, lines))
vote <- substring(vote, 7, nchar(vote)-7)
vote
rollCall274<-readLines("Roll_Call_274.xml")
getwd()
pat <- '^<recorded-vote>'
length(grep(pat, rollCall274))
grep(pat, rollCall274)
lines <- rollCall274[grep(pat, rollCall274)]
pat1 <- "name-id=\"[A-Z][0-9]{6}\""
id <- regmatches(lines, regexpr(pat1, lines))
id <- substring(id, 10, nchar(id)-1)
pat2 <- "unaccented-name=\".+\""
name <- regmatches(lines, regexpr(pat2, lines))
name
pat2 <- "unaccented-name=\".+\" party"
names <- regmatches(lines, regexpr(pat2, lines))
names <- substring(names.POSIXlt(), 18, nchar(names)-7)
names <- substring(names, 18, nchar(names)-7)
names
pat3 <- "party=\"[A-Z]\""
party <- regmatches(lines, regexpr(pat3, lines))
party <- substring(party, 8, nchar(party)-1)
pat4 <- "state=\"[A-Z]+\""
state <- regmatches(lines, regexpr(pat4, lines))
state <- substring(state, 8, nchar(state)-1)
pat5 <- "<vote>.+</vote>"
vote <- regmatches(lines, regexpr(pat5, lines))
vote <- substring(vote, 7, nchar(vote)-7)
vote
vote <- factor(vote)
levels(vote)
numeric.vote <- ifelse(vote == 'Aye', 0, 1, -1)
numeric.vote <- ifelse(vote == 'Aye', 0, ifelse(vote == 'No', 1, -1))
numeric.vote
pat2 <- "unaccented-name=\".+\" party"
name <- regmatches(lines, regexpr(pat2, lines))
name <- substring(name, 18, nchar(name)-7)
rollCall274 <- data.frame(name, state, party, vote, numeric.vote)
row.names(rollCall274) <- id
head(rollCall274)
apps<-read.csv("apps.csv", header = T)
apps$Reviews<-as.numeric(apps$Reviews)
apps$Installs<-factor(apps$Installs, level= c("1+", "5+", "10+", "50+", "100+", "500+", "1,000+", "5,000+", "10,000+", "50,000+", "100,000+", "500,000+", "1,000,000+","5,000,000+","10,000,000+","50,000,000+", "100,000,000+", "500,000,000+", "1,000,000,000+"))
apply(apps, 2, summary)
summary(apps$App)
inst_split <- split(apps, apps$Installs)
box_plt <- function(df) {
boxplot(df$Rating)
}
sapply(inst_split, box_plt)
library(plyr)
rat_plot <- function(df) {
plot(df$Price, df$Rating)
}
d_ply(apps, .(Category), rat_plot)
d_ply(apps, .(Category), rat_plot)
par(mfrow = c(11, 3))
par(mfrow = c(11, 3))
d_ply(apps, .(Category), rat_plot)
par(mfrow = c(11, 3), mar=c(1,1,1,1))
d_ply(apps, .(Category), rat_plot)
