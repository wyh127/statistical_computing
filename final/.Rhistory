library(MCMCpack)
install.packages("MCMCpack")
library(MCMCpack)
alpha<-rep(2, 3)
X<-rdirichlet(1e5, alpha)
colnames(X)<- c("x1", "x2", "x3")
X <- data.frame(X)
library(ggplot2)
ggplot(X, aes(x=x1, y=x2) ) +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(
legend.position='none'
)
alpha
head(X)
?dunif
dunif(0,1)
dunif(0.2,0,1)
dunif(0.1,0,1)
dunif(0.5,0,1)
g <- function(x) {
return(dunif(x[1], 0, 1) * dunif(x[2], 0, 1))
}
g(c(0.1, 0.3))
?ddirichlet
ddirichlet(c(0.1, 0.2), alpha)
ddirichlet(c(0.1, 0.2, 0.7), alpha)
f <- function(x) {
return(-ddirichlet(c(x, 1-x[1]-x[2]), alpha))
}
nlm(f, c(0.1, 0.2, 0.7))
f(c(0.1, 0.2))
nlm(f, c(0.1, 0.2))
g <- function(x) {
return(dnorm(x[1], 0, 1) * dnorm(x[2], 0, 1))
}
f <- function(x) {
return(ddirichlet(c(x, 1-x[1]-x[2]), alpha))
}
tmp <- function(x) {
return(-g(x)/f(x))
}
nlm(tmp, c(0.1, 0.2))
g <- function(x) {
return(dnorm(x[1], 0.5, 0.5) * dnorm(x[2], 0.5, 0.5))
}
tmp <- function(x) {
return(-g(x)/f(x))
}
nlm(tmp, c(0.1, 0.2))
votes <- read.table("2017_cleaned_votes.csv", header = TRUE, sep = ";")
dim(votes)
X <- votes[, 2:101]
head(X)
names(votes)
dim(X)
head(votes$party)
y <- ifelse(votes$party == "R", 1, 0)
dim(y)
length(y)
neg.ll.l2 <- function(beta, lamd) {
beta_0 <- beta[1]
beta_1 <- beta[2:101]
Y <- y
X.mat <- as.matrix(X)
linear.component <- beta_0 + X.mat%*%beta_1
p.i <- exp(linear.component)/(1+exp(linear.component))
pl <- lamd * sum(beta_1 ** 2)
return(-mean(dbinom(Y, size=1, prob=p.i,log=TRUE)) + )
neg.ll.l2 <- function(beta, lamd) {
beta_0 <- beta[1]
beta_1 <- beta[2:101]
Y <- y
X.mat <- as.matrix(X)
linear.component <- beta_0 + X.mat%*%beta_1
p.i <- exp(linear.component)/(1+exp(linear.component))
pl <- lamd * sum(beta_1 ** 2)
return(-mean(dbinom(Y, size=1, prob=p.i,log=TRUE)) + pl)
}
nlm(neg.ll.l2, rep(0, 101), lamd = 0.12)
nlm(neg.ll.l2, rep(0, 101), lamd = 0.12)[2]
dim(X)
beta <- nlm(neg.ll.l2, rep(0, 101), lamd = 0.12)[2]
cbind(rep(1, 424), as.matrix(X)) %*% beta
as.matrix(cbind(rep(1, 424), X)) %*% beta
cbind(rep(1, 424), X)
as.matrix(cbind(rep(1, 424), X)) %*% as.matrix(beta)
beta{1:4}
beta[1:4]
beta <- nlm(neg.ll.l2, rep(0, 101), lamd = 0.12$estimate
n
beta <- nlm(neg.ll.l2, rep(0, 101), lamd = 0.12)$estimate
beta
y_hat <- as.matrix(cbind(rep(1, 424), X)) %*% beta
length(y_hat)
y_hat
y_tmp <- as.matrix(cbind(rep(1, 424), X)) %*% beta
y_hat <- ifelse(y_tmp>0, 1, 0)
mean(y - y_hat)
y_tmp <- as.matrix(cbind(rep(1, 424), X)) %*% beta
y_hat <- ifelse(y_tmp>0, 1, 0)
mean(y - y_hat)
y_hat
y
head(y_hat)
sum(y == y_hat)
data <- read.csv("Problem1.csv")
data <- read.csv("Problem1.csv")
plot(data$X,data$Y, pch=16, main="Linear Trend and Outlyers")
lm1 <- lm(Y~X, data)
plot(data$X,data$Y, pch=16, main="Linear Trend and Outlyers")
abline(lm1, color = "red")
plot(data$X,data$Y, pch=16, main="Linear Trend and Outlyers")
abline(lm1, color = 2)
plot(data$X,data$Y, pch=16, main="Linear Trend and Outlyers")
lines(lm1, color = 2)
plot(data$X,data$Y, pch=16, main="Linear Trend and Outlyers")
abline(lm1, col = 2)
plot(data$X,data$Y, pch=16, main="Linear Trend and Outlyers")
abline(lm1, col = "red")
n_data <- data[data$Y != c(1.05, 1.94, 2.38), ]
lm2 <- lm(Y~X, n_data)
plot(data$X,data$Y, pch=16, main="Linear Trend and Outlyers")
abline(lm1, col = 2)
abline(lm2, col = "blue")
Q <- function(b0, b1) {
lin <- data$Y - (b0 + b1 * data$X)
tmp <- ifelse(abs(lin) <= 1, lin**2, 2*abs(lin)-1)
return(sum(tmp))
}
Q(c(0, 0))
Q(0, 0)
Q <- function(b) {
lin <- data$Y - (b[1] + b[2] * data$X)
tmp <- ifelse(abs(lin) <= 1, lin**2, 2*abs(lin)-1)
return(sum(tmp))
}
Q(c(0, 0))
nlm(Q, c(0, 0))
ggplot + geom_smooth(data = data, Y~X)
ggplot + geom_smooth(data = data, aes(x = X, y = Y))
ggplot() + geom_smooth(data = data, aes(x = X, y = Y))
ggplot() + geom_smooth(data = data, aes(x = X, y = Y), method =  "lm")
ggplot() + geom_smooth(data = data, aes(x = X, y = Y), method =  "lm", se = "F")
ggplot() + geom_smooth(data = data, aes(x = X, y = Y), method =  "lm", se = F)
est <- nlm(Q, c(0, 0))$estimate
est
ggplot() + geom_smooth(data = data, aes(x = X, y = Y, col = "regular"), method =  "lm", se = F) +
geom_abline(est)
ggplot() + geom_smooth(data = data, aes(x = X, y = Y, col = "regular"), method =  "lm", se = F) +
geom_abline(intercept = est[1], slope = est[2])
ggplot() + geom_smooth(data = data, aes(x = X, y = Y, col = "regular"), method =  "lm", se = F) +
geom_abline(intercept = est[1], slope = est[2], aes(col = "huber"))
ggplot() + geom_smooth(data = data, aes(x = X, y = Y, col = "regular"), method =  "lm", se = F) +
geom_abline(intercept = est[1], slope = est[2], col = "blue")
ggplot() + geom_smooth(data = data, aes(x = X, y = Y), col = "red", method =  "lm", se = F) +
geom_abline(intercept = est[1], slope = est[2], col = "blue")
ggplot() + geom_smooth(data = data, aes(x = X, y = Y), col = "red", method =  "lm", se = F) +
geom_abline(intercept = est[1], slope = est[2], col = "blue")+
geom_point(data = data, aes(x = X, y = Y))
ggplot() + geom_smooth(data = data, aes(x = X, y = Y), col = "red", method =  "lm", se = F) +
geom_abline(intercept = est[1], slope = est[2], col = "blue", aes(col = "1"))+
geom_point(data = data, aes(x = X, y = Y))
rdirichlet(1, alpha)
g <- function(x) {
return(dunif(x[1], 0.5, 0.5) * dunif(x[2], 0.5, 0.5))
}
f <- function(x) {
return(ddirichlet(c(x, 1-x[1]-x[2]), alpha))
}
f <- function(x) {
return(ddirichlet(c(x, 1-x[1]-x[2]), alpha))
}
tmp <- function(x) {
return(-g(x)/f(x))
}
nlm(tmp, c(0.1, 0.2))
f <- function(x) {
return(ddirichlet(c(x, 1-x[1]-x[2]), alpha))
}
f <- function(x) {
return(-ddirichlet(c(x, 1-x[1]-x[2]), alpha))
}
nlm(f, c(0.1, 0.2))
e <- function(x, ga = 1/4.5) {
return(g(x)/ga)
}
runif(2, 0, 1)
f(runif(2, 0, 1))
# Solution goes here
f <- function(x) {
return(ddirichlet(c(x, 1-x[1]-x[2]), alpha))
}
# Solution goes here
f(runif(2, 0, 1))
f(runif(2, 0, 1))
f(runif(2, 0, 1))
f(runif(2, 0, 1))
f(runif(2, 0, 1))
f(runif(2, 0, 1))
f(runif(2, 0, 1))
f(runif(2, 0, 1))
f(runif(2, 0, 1))
f(runif(2, 0, 1))
?dunif
k <- 0
bi <- matrix(nrow = 10000, ncol = 2)
while(k <= 10000) {
x <- runif(2, 0, 1)
if(x[1] + x[2] < 1) {
u <- runif(1, 0, 1)
if(u * e(x) < f(x)) {
k <- k + 1
bi[k, ] <- x
}
}
}
e(runif(2, 0, 1))
e <- function(x, ga = 1/4.5) {
return(g(x)/ga)
}
e(runif(2, 0, 1))
g <- function(x) {
return(dunif(x[1], 0, 1) * dunif(x[2], 0, 1))
}
f <- function(x) {
return(ddirichlet(c(x, 1-x[1]-x[2]), alpha))
}
e <- function(x, ga = 1/4.5) {
return(g(x)/ga)
}
k <- 0
bi <- matrix(nrow = 10000, ncol = 2)
while(k <= 10000) {
x <- runif(2, 0, 1)
if(x[1] + x[2] < 1) {
u <- runif(1, 0, 1)
if(u * e(x) < f(x)) {
k <- k + 1
bi[k, ] <- x
}
}
}
k <- 0
bi <- matrix(ncol = 2)
while(k <= 10000) {
x <- runif(2, 0, 1)
if(x[1] + x[2] < 1) {
u <- runif(1, 0, 1)
if(u * e(x) < f(x)) {
k <- k + 1
bi[k, ] <- x
}
}
}
bi <- matrix(ncol = 2)
bi
while(k <= 10000) {
x <- runif(2, 0, 1)
if(x[1] + x[2] < 1) {
u <- runif(1, 0, 1)
if(u * e(x) < f(x)) {
k <- k + 1
#bi[k, ] <- x
}
}
}
k
k <- 0
bi <- matrix(nrow = 10000, ncol = 2)
while(k < 10000) {
x <- runif(2, 0, 1)
if(x[1] + x[2] < 1) {
u <- runif(1, 0, 1)
if(u * e(x) < f(x)) {
k <- k + 1
bi[k, ] <- x
}
}
}
head(bi)
df_bi <- as.data.frame(bi)
names(df_bi) <- c("x1", "x2")
ggplot(df_bi, aes(x=x1, y=x2) ) +
stat_density_2d(aes(fill = ..density..), geom = "raster", contour = FALSE) +
scale_x_continuous(expand = c(0, 0)) +
scale_y_continuous(expand = c(0, 0)) +
theme(
legend.position='none'
)
k <- 0
all <- 0
bi <- matrix(nrow = 10000, ncol = 2)
while(k < 10000) {
x <- runif(2, 0, 1)
if(x[1] + x[2] < 1) {
u <- runif(1, 0, 1)
if(u * e(x) < f(x)) {
k <- k + 1
bi[k, ] <- x
}
}
all <- all+1
}
all
k/all
k
1/4.5
k/all
head(X)
nlm(neg.ll.l2, rep(0, 101), lamd = 0.12)
beta <- nlm(neg.ll.l2, rep(0, 101), lamd = 0.12)$estimate
beta
y_tmp <- as.matrix(cbind(rep(1, 424), X)) %*% beta
y_hat <- ifelse(y_tmp>0, 1, 0)
sum(y == y_hat)
424/4
424/11
424/53
dim(votes)
lm1 <- lm(Y~X, data)
plot(data$X,data$Y, pch=16, main="Linear Trend and Outlyers")
abline(lm1, col = "red")
n_data <- data[data$Y != c(1.05, 1.94, 2.38), ]
lm2 <- lm(Y~X, n_data)
plot(data$X,data$Y, pch=16, main="Linear Trend and Outlyers")
abline(lm1, col = 2)
abline(lm2, col = "blue")
ggplot() + geom_smooth(data = data, aes(x = X, y = Y), col = "red", method =  "lm", se = F) +
geom_abline(intercept = est[1], slope = est[2], col = "blue")+
geom_point(data = data, aes(x = X, y = Y)) +
labs
ggplot() + geom_smooth(data = data, aes(x = X, y = Y), col = "red", method =  "lm", se = F) +
geom_abline(intercept = est[1], slope = est[2], col = "blue")+
geom_point(data = data, aes(x = X, y = Y))
ggplot() + geom_smooth(data = data, aes(x = X, y = Y), col = "red", method =  "lm", se = F) +
geom_point(data = data, aes(x = X, y = Y)) +
geom_line(aes(x = seq(0, 10), y = est[1] + est[2] * seq(0, 10)))
ggplot() + geom_smooth(data = data, aes(x = X, y = Y), col = "regular", method =  "lm", se = F) +
geom_point(data = data, aes(x = X, y = Y)) +
geom_line(aes(x = seq(0, 10), y = est[1] + est[2] * seq(0, 10), color = "huber"))
ggplot() + geom_smooth(data = data, aes(x = X, y = Y, color = "regular"), method =  "lm", se = F) +
geom_point(data = data, aes(x = X, y = Y)) +
geom_line(aes(x = seq(0, 10), y = est[1] + est[2] * seq(0, 10), color = "huber"))
ggplot() + geom_smooth(data = data, aes(x = X, y = Y, color = "regular"), method =  "lm", se = F) +
geom_point(data = data, aes(x = X, y = Y)) +
geom_line(aes(x = seq(0, 10), y = est[1] + est[2] * seq(0, 10), color = "huber")) +
labs(color = "regression type")
