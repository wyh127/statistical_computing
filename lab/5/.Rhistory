iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.000001
step <- 0.5
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
#& (sum(abs(prime) > stopping.deriv) > 0)
while(iter < max.iter) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / max(abs(prime))
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=rep(0,8))
Newtons.Method <- function(f, x0, max.iter = 200, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.000001
step <- 0.5
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / max(abs(prime))
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=rep(0,8))
Newtons.Method <- function(f, x0, max.iter = 200, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.000001
step <- 0.5
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / (max(prime) - min(prime))
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=rep(0,8))
Newtons.Method <- function(f, x0, max.iter = 200, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.000001
step <- 0.5
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / max(abs(prime))
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=rep(0,8))
Newtons.Method <- function(f, x0, max.iter = 200, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.000001
step <- 0.5
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / f(x_init)
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=rep(0,8))
Newtons.Method(logistic.NLL, x0=rep(1,8))
Newtons.Method <- function(f, x0, max.iter = 200, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.0001
step <- 0.5
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / f(x_init)
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=rep(0,8))
Newtons.Method <- function(f, x0, max.iter = 200, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.0000001
step <- 0.5
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / f(x_init)
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=rep(0,8))
Newtons.Method <- function(f, x0, max.iter = 200, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.0000001
step <- 0.05
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / f(x_init)
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=rep(0,8))
Newtons.Method <- function(f, x0, max.iter = 200, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.0001
step <- 0.05
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / f(x_init)
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=rep(0,8))
Newtons.Method <- function(f, x0, max.iter = 200, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.0001
step <- 0.005
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / f(x_init)
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=rep(0,8))
Newtons.Method <- function(f, x0, max.iter = 200, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.0001
step <- 0.001
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / f(x_init)
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=rep(0,8))
Newtons.Method <- function(f, x0, max.iter = 200, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.00001
step <- 0.001
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / f(x_init)
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=rep(0,8))
Newtons.Method <- function(f, x0, max.iter = 1000, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.00001
step <- 0.001
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / f(x_init)
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=rep(0,8))
Newtons.Method <- function(f, x0, max.iter = 1000, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.00001
step <- 0.00001
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / f(x_init)
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=rep(0,8))
Newtons.Method(logistic.NLL, x0=c(1.43, 1.37, 1.09, 1.06, 1.17, 1.18, 1.38, 1.54)
Newtons.Method(logistic.NLL, x0=c(1.43, 1.37, 1.09, 1.06, 1.17, 1.18, 1.38, 1.54))
Newtons.Method(logistic.NLL, x0=c(1.43, 1.37, 1.09, 1.06, 1.17, 1.18, 1.38, 1.54))
Newtons.Method <- function(f, x0, max.iter = 1000, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.001
step <- 0.00001
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / f(x_init)
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=c(1.43, 1.37, 1.09, 1.06, 1.17, 1.18, 1.38, 1.54))
Newtons.Method <- function(f, x0, max.iter = 1000, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.0001
step <- 0.00001
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / max(abs(prime))
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=c(1.43, 1.37, 1.09, 1.06, 1.17, 1.18, 1.38, 1.54))
Newtons.Method <- function(f, x0, max.iter = 1000, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.0001
step <- 0.00001
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / max(abs(prime))
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=c(1.43, 1.37, 1.09, 1.06, 1.17, 1.18, 1.38, 1.54))
Newtons.Method <- function(f, x0, max.iter = 1000, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.0001
step <- 0.00001
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / max(abs(prime)) * 0.01
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=c(1.43, 1.37, 1.09, 1.06, 1.17, 1.18, 1.38, 1.54))
Newtons.Method <- function(f, x0, max.iter = 1000, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.0001
step <- 0.00001
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / max(abs(prime)) * 0.001
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=c(1.43, 1.37, 1.09, 1.06, 1.17, 1.18, 1.38, 1.54))
Newtons.Method(logistic.NLL, x0=rep(0.8)
Newtons.Method(logistic.NLL, x0=rep(0.8))
Newtons.Method(logistic.NLL, x0=rep(0.8))
Newtons.Method <- function(f, x0, max.iter = 1000, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.0001
step <- 0.00001
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / max(abs(prime)) * 0.001
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=rep(0, 8))
Newtons.Method <- function(f, x0, max.iter = 1000, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.0001
step <- 0.00001
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / max(abs(prime)) * 0.01
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=rep(0, 8))
Newtons.Method <- function(f, x0, max.iter = 200, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.0001
step <- 0.00001
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / max(abs(prime)) * 0.1
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=rep(0, 8))
Newtons.Method <- function(f, x0, max.iter = 200, stopping.deriv = 0.001, ...) {
n <- length(x0)
iter <- 0
prime <- rep(Inf, n)
x_init <- x0
h <- 0.0001
step <- 0.0001
# create a set of unit vectors for calculating gradeint vectors
units <- diag(n)
while(iter < max.iter & (sum(abs(prime) > stopping.deriv) > 0)) {
for(i in c(1:n)) {
prime[i] <- (f(x_init + h * units[i, ]) - f(x_init)) / h
}
prime <- prime / max(abs(prime))
print(prime)
x_init <- x_init - step * prime
iter <- iter+1
}
res <- list(x_res = x_init, f_res = f(x_init), iter_res = iter, conv = (iter < max.iter))
return(res)
}
Newtons.Method(logistic.NLL, x0=rep(0, 8))
