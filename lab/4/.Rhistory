train[1, c(2:6)]
test[1, c(2:6)]
KNN.decision <- function(new_data, K, df_lag) {
n <- length(Weekly)
stopifnot(length(new_data) == 5, K <= n)
dists <- apply(df_lag, 1, function(x) x-new_data)
dists <- sapply(dists, function(x) sqrt(sum(x^2)))
neighbors  <- order(dists)[1:K]
neighb.dir <- Weekly$Direction[neighbors]
choice      <- names(which.max(table(neighb.dir)))
return(choice)
}
pred <- c()
for(i in c(1:n_test)) {
pred <- c(pred, KNN.decision(test[i, c(2:6)], 5, train[, c(2:6)]))
}
KNN.decision(test[1, c(2:6)], 5, train[, c(2:6)])
KNN.decision(test[2, c(2:6)], 5, train[, c(2:6)])
pred <- c()
for(i in c(1:n_test)) {
pred <- c(pred, KNN.decision(test[i, c(2:6)], 5, train[, c(2:6)]))
}
pred <- c()
for(i in c(1:n_test)) {
pred <- c(pred, KNN.decision(test[i, c(2:6)], 5, train[, c(2:6)]))
}
n_test
pred
test.error <- sum(pred == test$Direction) / n_test
test.error
test.error <- sum(pred != test$Direction) / n_test
test.error
pred1 <- c()
for(i in c(1:n_test)) {
pred1 <- c(pred1, KNN.decision(test[i, c(2:6)], 3, train[, c(2:6)]))
}
test.error1 <- sum(pred != test$Direction) / n_test
test.error1
test.error
test.error1 <- sum(pred1 != test$Direction) / n_test
test.error1
test[1, c(2:6)]
test[1, c(2:6)][1]
test[1, c(2:6)][1]-train[, 2]
test[1, c(2:6)]-train[, 2]
test[1, c(2:6)][1]-train[, 2]
train[, 2]
test[1, c(2:6)][1]-train[, 2]
for(i in c(1:n_test)) {
pred <- c(pred, KNN.decision(test[i, c(2:6)], 5, train[, c(2:6)]))
}
test.error <- sum(pred != test$Direction) / n_test
test.error
pred1 <- c()
for(i in c(1:n_test)) {
pred1 <- c(pred1, KNN.decision(test[i, c(2:6)], 3, train[, c(2:6)]))
}
test.error1 <- sum(pred1 != test$Direction) / n_test
test.error1
pred <- c()
for(i in c(1:n_test)) {
pred <- c(pred, KNN.decision(test[i, c(2:6)], 5, train[, c(2:6)]))
}
test.error <- sum(pred != test$Direction) / n_test
test.error
KNN.decision <- function(new_data, K, df_lag) {
stopifnot(length(new_data) == 5, K <= nrow(df_lag))
dists <- apply(df_lag, 1, function(x) x-new_data)
dists <- sapply(dists, function(x) sqrt(sum(x^2)))
#neighbors  <- order(dists)[1:K]
#neighb.dir <- Weekly$Direction[neighbors]
#choice <- names(which.max(table(neighb.dir)))
#return(choice)
return(dists)
}
for(i in c(1:n_test)) {
KNN.decision(test[i, c(2:6)], 5, train[, c(2:6)])
}
?apply
apply(train[, c(2:6)], 1, '-', test[1, c(2:6)])
KNN.decision <- function(new_data, K, df_lag) {
stopifnot(length(new_data) == 5, K <= nrow(df_lag))
dists <- apply(df_lag, 1, '-', new_data)
#dists <- apply(df_lag, 1, function(x) x-new_data)
dists <- sapply(dists, function(x) sqrt(sum(x^2)))
neighbors  <- order(dists)[1:K]
neighb.dir <- Weekly$Direction[neighbors]
choice <- names(which.max(table(neighb.dir)))
return(choice)
}
pred <- c()
for(i in c(1:n_test)) {
pred <- c(pred, KNN.decision(test[i, c(2:6)], 5, train[, c(2:6)]))
}
test.error <- sum(pred != test$Direction) / n_test
test.error
sweep(train[, c(2:6)], 1, test[1, c(2:6)], "-")
sweep(train[, c(2:6)], 2, test[1, c(2:6)], "-")
sweep(train[, c(2:6)], 1, test[1, c(2:6)], "-")
library(ISLR)
boxplot(Weekly$Lag1~Weekly$Direction,main="Returns",ylab="One Week Ago",xlab="Direction")
train <- Weekly[Weekly$Year <= 2008, ]
test <- Weekly[!Weekly$Year <= 2008, ]
n_test <- nrow(test)
n_test
head(apply(train[, c(2:6)], 1, function(x) x-train[1, c(2:6)]))
head(apply(train[, c(2:6)], 1, function(x) x-test[1, c(2:6)]))
head(apply(train[, c(2:6)], 1, function(x) x-train[2, c(2:6)]))
for(i in c(1:n_test)) {
tmp <- apply(train[, c(2:6)], 1, function(x) x-train[i, c(2:6)])
tmp <- sapply(tmp, function(x) sqrt(sum(x^2)))
print(head(tmp))
}
KNN.decision <- function(new_data, K, df_lag) {
stopifnot(length(new_data) == 5, K <= nrow(df_lag))
#dists <- apply(df_lag, 1, '-', new_data)
dists <- apply(df_lag, 1, function(x) x-new_data)
dists <- sapply(dists, function(x) sqrt(sum(x^2)))
neighbors  <- order(dists)[1:K]
neighb.dir <- Weekly$Direction[neighbors]
choice <- names(which.max(table(neighb.dir)))
return(choice)
}
pred <- c()
for(i in c(1:n_test)) {
pred <- c(pred, KNN.decision(test[i, c(2:6)], 5, train[, c(2:6)]))
}
test.error <- sum(pred != test$Direction) / n_test
test.error
data.matrix(train)
train <- Weekly[Weekly$Year <= 2008, c(2:6)]
test <- Weekly[!Weekly$Year <= 2008, c(2:6)]
for(i in c(1:n_test)) {
pred <- c(pred, KNN.decision(test[i, ], 5, train))
}
test.error <- sum(pred != test$Direction) / n_test
test.error
train_m <- matrix(train)
test_m <- matrix(test)
train_m
train_m <- data.matrix(train)
test_m <- data.matrix(test)
train_m
train_m - test_m[1, ]
typeof(train_m)
class(train_m)
head(train_m)
head(train_m-c(1, 2, 3, 4, 5))
head(train_m-t(c(1, 2, 3, 4, 5)))
fold <- vector(mode = "numerical", length = nrow(Weekly))
?mode
fold <- vector(mode = "numeric", length = nrow(Weekly))
head(fold)
fold <- repeat(c(1:9), 121)
?repeat
s
?rep
fold <- repeat(1:9, 121)
fold <- rep(1:9, 121)
fold <- rep(c(1:9), 121)
fold <- rep(1:9, 121)
head(fold)
fold
fold <- sample(fold, nrow(Weekly))
fold
sum(fold == 1)
sum(fold == 2)
err <- c()
for(i in c(1:9)) {
train_i <- Weekly[fold != i, ]
test_i <- Weekly[fold == i, ]
pred_tmp <- c()
for(j in c(1:121)) {
pred_tmp <- c(pred_tmp, KNN.decision(test_i[j, c(2:6)], 3, train_i[, c(2:6)]))
}
err <- c(err, sum(pred_tmp != test_i$Direction) / 121)
}
fold <- rep(1:9, 121)
library(ISLR)
b <- matrix(rep(1:20), nrow=4, ncol=5)
x <- c(5,6,7)
sweep(b)
b
sweep(b[,3:5],2,x)
sweep(train[, 2:6], 2, test[1, 2:6])
sweep(train[, c(2:6)], 2, test[1, c(2:6)])
test[1, c(2:6)]
train <- Weekly[Weekly$Year <= 2008, c(2:6)]
test <- Weekly[!Weekly$Year <= 2008, c(2:6)]
sweep(train[, c(2:6)], 2, test[1, c(2:6)])
test[1, c(2:6)]
train[, c(2:6)]
train[, c(2:6)]
test[1, 2]
test[1, 2:6]
test[1, c(2:6)]
test[1, ]
sweep(train, 2, test[1, ])
test[1, ]
sweep(train, 2, as.vector(test[1, ]))
sweep(train, 2, as.numeric(test[1, ]))
KNN.decision <- function(new_data, K, df_lag) {
stopifnot(length(new_data) == 5, K <= nrow(df_lag))
#dists <- apply(df_lag, 1, '-', new_data)
#dists <- apply(df_lag, 1, function(x) x-new_data)
#dists <- sapply(dists, function(x) sqrt(sum(x^2)))
dists <- sweep(df_lag, 2, as.numeric(new_data))
dists <- sqrt(sum(dists^2))
neighbors  <- order(dists)[1:K]
neighb.dir <- Weekly$Direction[neighbors]
choice <- names(which.max(table(neighb.dir)))
return(choice)
}
n_test <- nrow(test)
pred <- c()
for(i in c(1:n_test)) {
pred <- c(pred, KNN.decision(test[i, ], 5, train))
}
test.error <- sum(pred != test$Direction) / n_test
test.error
train <- Weekly[Weekly$Year <= 2008, c(2:6)]
test <- Weekly[!Weekly$Year <= 2008, c(2:6)]
n_test <- nrow(test)
pred <- c()
for(i in c(1:n_test)) {
pred <- c(pred, KNN.decision(test[i, ], 5, train))
}
test.error <- sum(pred != test$Direction) / n_test
test.error
KNN.decision <- function(new_data, K, df_lag) {
stopifnot(length(new_data) == 5, K <= nrow(df_lag))
#dists <- apply(df_lag, 1, '-', new_data)
#dists <- apply(df_lag, 1, function(x) x-new_data)
#dists <- sapply(dists, function(x) sqrt(sum(x^2)))
dists <- sweep(df_lag, 2, as.numeric(new_data))
dists <- sqrt(sum(dists^2))
neighbors  <- order(dists)[1:K]
neighb.dir <- Weekly$Direction[neighbors]
choice <- names(which.max(table(neighb.dir)))
return(choice)
}
KNN.decision(test[1, ], 5, train)
pred <- c()
for(i in c(1:n_test)) {
pred <- c(pred, KNN.decision(test[i, ], 5, train))
}
test.error <- sum(pred != test$Direction) / n_test
test.error
pred
KNN.decision(test[2, ], 5, train)
KNN.decision(test[8, ], 5, train)
sum(pred != test$Direction)
test$Direction
head(sweep(train, 2, as.numeric(test[1, ])))
head(train)
test[1, ]
head(sum(sweep(train, 2, as.numeric(test[1, ])))^2))
head(sum(sweep(train, 2, as.numeric(test[1, ])))^2)
tmp <- sweep(train, 2, as.numeric(test[1, ]))
head(tmp)
head(sum(tmp^2))
sum(tmp^2)
apply(tmp, 1, function(x) sqrt(sum(x^2)))
sapply(tmp, 1, function(x) sqrt(sum(x^2)))
KNN.decision <- function(new_data, K, df_lag) {
stopifnot(length(new_data) == 5, K <= nrow(df_lag))
#dists <- apply(df_lag, 1, '-', new_data)
#dists <- apply(df_lag, 1, function(x) x-new_data)
#dists <- sapply(dists, function(x) sqrt(sum(x^2)))
dists <- sweep(df_lag, 2, as.numeric(new_data))
dists <- apply(dists, 1, function(x) sqrt(sum(x^2)))
neighbors  <- order(dists)[1:K]
neighb.dir <- Weekly$Direction[neighbors]
choice <- names(which.max(table(neighb.dir)))
return(choice)
}
pred <- c()
for(i in c(1:n_test)) {
pred <- c(pred, KNN.decision(test[i, ], 5, train))
}
test.error <- sum(pred != test$Direction) / n_test
test.error
pred
test.error <- sum(pred != Weekly[!Weekly$Year <= 2008, ]$Direction) / n_test
test.error
pred1 <- c()
for(i in c(1:n_test)) {
pred1 <- c(pred1, KNN.decision(test[i, c(2:6)], 3, train[, c(2:6)]))
}
pred1 <- c()
for(i in c(1:n_test)) {
pred1 <- c(pred1, KNN.decision(test[i, ], 3, train))
}
test.error1 <- sum(pred1 != test$Direction) / n_test
test.error1
pred1 <- c()
for(i in c(1:n_test)) {
pred1 <- c(pred1, KNN.decision(test[i, ], 3, train))
}
test.error1 <- sum(pred1 != Weekly[!Weekly$Year <= 2008, ]$Direction) / n_test
test.error1
train <- Weekly[Weekly$Year <= 2008, ]
test <- Weekly[!Weekly$Year <= 2008, ]
n_test <- nrow(test)
pred <- c()
for(i in c(1:n_test)) {
pred <- c(pred, KNN.decision(test[i, c(2:6)], 5, train[, c(2:6)]))
}
test.error <- sum(pred != test$Direction) / n_test
test.error
pred1 <- c()
for(i in c(1:n_test)) {
pred1 <- c(pred1, KNN.decision(test[i, ], 3, train))
}
pred1 <- c()
for(i in c(1:n_test)) {
pred1 <- c(pred1, KNN.decision(test[i, 2:6], 3, train[, 2:6]))
}
test.error1 <- sum(pred1 != test$Direction) / n_test
test.error1
fold <- rep(1:9, 121)
fold <- sample(fold, nrow(Weekly))
err <- c()
for(i in c(1:9)) {
train_i <- Weekly[fold != i, ]
test_i <- Weekly[fold == i, ]
pred_tmp <- c()
for(j in c(1:nrow(test_i))) {
pred_tmp <- c(pred_tmp, KNN.decision(test_i[j, 2:6], 5, train_i[, 2:6]))
}
err <- c(err, sum(pred_tmp != test_i$Direction) / nrow(test_i))
}
err
CV_5 <- mean(err)
CV_5
cv <- c()
for(k in c(1, 3, 5, 7)) {
err <- c()
for(i in c(1:9)) {
train_i <- Weekly[fold != i, ]
test_i <- Weekly[fold == i, ]
pred_tmp <- c()
for(j in c(1:nrow(test_i))) {
pred_tmp <- c(pred_tmp, KNN.decision(test_i[j, 2:6], k, train_i[, 2:6]))
}
err <- c(err, sum(pred_tmp != test_i$Direction) / nrow(test_i))
}
cv <- c(cv, mean(err))
}
cv
as.numeric(train)
train
as.numeric(train[, 2:6])
train[,2:6]
KNN.decision <- function(new_data, K, df_lag) {
stopifnot(length(new_data) == 5, K <= nrow(df_lag))
#these have really bad performance
#dists <- apply(df_lag, 1, '-', new_data)
dists <- apply(df_lag, 1, function(x) x-as.numeric(new_data))
#dists <- sapply(dists, function(x) sqrt(sum(x^2)))
#dists <- sweep(df_lag, 2, as.numeric(new_data))
dists <- apply(dists, 1, function(x) sqrt(sum(x^2)))
neighbors  <- order(dists)[1:K]
neighb.dir <- Weekly$Direction[neighbors]
choice <- names(which.max(table(neighb.dir)))
return(choice)
}
pred <- c()
for(i in c(1:n_test)) {
pred <- c(pred, KNN.decision(test[i, 2:6], 5, train[, 2:6]))
}
test.error <- sum(pred != test$Direction) / n_test
test.error
train <- Weekly[Weekly$Year <= 2008, ]
test <- Weekly[!Weekly$Year <= 2008, ]
n_test <- nrow(test)
pred <- c()
for(i in c(1:n_test)) {
pred <- c(pred, KNN.decision(test[i, 2:6], 5, train[, 2:6]))
}
test.error <- sum(pred != test$Direction) / n_test
test.error
pred1 <- c()
for(i in c(1:n_test)) {
pred1 <- c(pred1, KNN.decision(test[i, 2:6], 3, train[, 2:6]))
}
test.error1 <- sum(pred1 != test$Direction) / n_test
test.error1
KNN.decision <- function(new_data, K, df_lag) {
stopifnot(length(new_data) == 5, K <= nrow(df_lag))
#these have really bad performance
dists <- apply(df_lag, 1, '-', as.numeric(new_data))
#dists <- apply(df_lag, 1, function(x) x-as.numeric(new_data))
#dists <- sapply(dists, function(x) sqrt(sum(x^2)))
#dists <- sweep(df_lag, 2, as.numeric(new_data))
dists <- apply(dists, 1, function(x) sqrt(sum(x^2)))
neighbors  <- order(dists)[1:K]
neighb.dir <- Weekly$Direction[neighbors]
choice <- names(which.max(table(neighb.dir)))
return(choice)
}
pred <- c()
for(i in c(1:n_test)) {
pred <- c(pred, KNN.decision(test[i, 2:6], 5, train[, 2:6]))
}
test.error <- sum(pred != test$Direction) / n_test
test.error
KNN.decision <- function(new_data, K, df_lag) {
stopifnot(length(new_data) == 5, K <= nrow(df_lag))
#these have really bad performance
#dists <- apply(df_lag, 1, '-', as.numeric(new_data))
#dists <- apply(df_lag, 1, function(x) x-as.numeric(new_data))
#dists <- sapply(dists, function(x) sqrt(sum(x^2)))
dists <- sweep(df_lag, 2, as.numeric(new_data))
dists <- apply(dists, 1, function(x) sqrt(sum(x^2)))
neighbors  <- order(dists)[1:K]
neighb.dir <- Weekly$Direction[neighbors]
choice <- names(which.max(table(neighb.dir)))
return(choice)
}
pred <- c()
for(i in c(1:n_test)) {
pred <- c(pred, KNN.decision(test[i, 2:6], 5, train[, 2:6]))
}
test.error <- sum(pred != test$Direction) / n_test
test.error
pred1 <- c()
for(i in c(1:n_test)) {
pred1 <- c(pred1, KNN.decision(test[i, 2:6], 3, train[, 2:6]))
}
test.error1 <- sum(pred1 != test$Direction) / n_test
test.error1
err
apply(train[, 2:6], 1, '-', as.numeric(test[1, 2:6]))
t(apply(train[, 2:6], 1, '-', as.numeric(test[1, 2:6])))
KNN.decision <- function(new_data, K, df_lag) {
stopifnot(length(new_data) == 5, K <= nrow(df_lag))
#these have really bad performance
dists <- t(apply(df_lag, 1, '-', as.numeric(new_data)))
#dists <- apply(df_lag, 1, function(x) x-as.numeric(new_data))
#dists <- sapply(dists, function(x) sqrt(sum(x^2)))
dists <- sweep(df_lag, 2, as.numeric(new_data))
dists <- apply(dists, 1, function(x) sqrt(sum(x^2)))
neighbors  <- order(dists)[1:K]
neighb.dir <- Weekly$Direction[neighbors]
choice <- names(which.max(table(neighb.dir)))
return(choice)
}
pred <- c()
for(i in c(1:n_test)) {
pred <- c(pred, KNN.decision(test[i, 2:6], 5, train[, 2:6]))
}
test.error <- sum(pred != test$Direction) / n_test
test.error
KNN.decision <- function(new_data, K, df_lag) {
stopifnot(length(new_data) == 5, K <= nrow(df_lag))
#these have really bad performance
#dists <- apply(df_lag, 1, '-', as.numeric(new_data))
#dists <- apply(df_lag, 1, function(x) x-as.numeric(new_data))
#dists <- sapply(dists, function(x) sqrt(sum(x^2)))
dists <- sweep(df_lag, 2, as.numeric(new_data))
dists <- apply(dists, 1, function(x) sqrt(sum(x^2)))
neighbors  <- order(dists)[1:K]
neighb.dir <- Weekly$Direction[neighbors]
choice <- names(which.max(table(neighb.dir)))
return(choice)
}
pred <- c()
for(i in c(1:n_test)) {
pred <- c(pred, KNN.decision(test[i, 2:6], 5, train[, 2:6]))
}
test.error <- sum(pred != test$Direction) / n_test
test.error
library(ISLR)
plot(Weekly$Lag1,Weekly$Today,main="Returns",xlab="Two Weeks Ago",ylab="Today")
abline(lm(Weekly$Today~Weekly$Lag1),col="red")
head(Weekly)
KNN.decision.lab <- function(test.lag, K = 5, Lag.data = data.frame(Weekly$Lag1,Weekly$Lag2,Weekly$Lag3,Weekly$Lag4,Weekly$Lag5,Weekly$Direction)) {
n <- nrow(Lag.data)
stopifnot(length(test.lag) == 5, K <= n)
dists       <- sqrt((test.lag[1]-Lag.data[[1]])^2 +
(test.lag[2]-Lag.data[[2]])^2+
(test.lag[3]-Lag.data[[3]])^2+
(test.lag[4]-Lag.data[[4]])^2+
(test.lag[5]-Lag.data[[5]])^2)
ord.indices <- order(dists)[1:K]
neighb.dir  <- Lag.data[[6]][ord.indices]
choice      <- names(which.max(table(neighb.dir)))
return(choice)
}
KNN.decision.lab(test.lag=c(-.5,.5,-.5,-.5,.5))
dbinom(1, prob = 0.5)
dbinom(1, prob = 0.5, size = 1)
dbinom(1, prob = 0.5, size = 2)
dbinom(1, prob = 0.5, size = 3)
dbinom(1, prob = 0.5, size = 2)
dbinom(1, prob = 0.5, size = 3)
dbinom(1, prob = 0.5, size = 4)
dbinom(1, prob = 0.5, size = 6)
?dbinom
dbinom(2, prob = 0.5, size = 2)
dbinom(3, prob = 0.5, size = 2)
dbinom(3, prob = 0.5, size = 1)
dbinom(2, prob = 0.5, size = 1)
dbinom(1, prob = 0.5, size = 1)
dbinom(2, prob = 0.5, size = 1)
dbinom(c(1, 1), prob = 0.5, size = 2)
dbinom(c(1, 0), prob = 0.4, size = 2)
dbinom(c(1, 0), prob = 0.4, size = 1)
dbinom(c(1, 0, 2), prob = 0.4, size = 1)
dbinom(c(1, 0, 2), prob = 0.4, size = 2)
dbinom(c(1, 0, 2, 4), prob = 0.4, size = 2)
