hist(cauchy.draws, prob = T, xlim = c(-10, 10))
hist(cauchy.draws, prob = T, xlim = c(-10, 10))
hist(cauchy.draws, breaks = 1000, prob = T, xlim = c(-10, 10))
hist(cauchy.draws, breaks = 1000, prob = T, xlim = c(-10, 10))
lines(x, 1 / (pi*(1+x^2)), col = "blue")
cauchy.draws <- cauchy.sim(1000)
hist(cauchy.draws, breaks = 1000, prob = T, xlim = c(-10, 10))
hist(cauchy.draws, breaks = 1000, prob = T, xlim = c(-10, 10))
lines(x, 1 / (pi*(1+x^2)), col = "blue")
hist(cauchy.draws, breaks = 1000, prob = T, xlim = c(-10, 10))
lines(x, 1 / (pi*(1+x^2)), col = "blue")
set.seed(0)
cauchy.draws <- cauchy.sim(1000)
hist(cauchy.draws, breaks = 1000, prob = T, xlim = c(-10, 10))
lines(x, 1 / (pi*(1+x^2)), col = "blue")
hist(cauchy.draws, breaks = 12000, prob = T, xlim = c(-10, 10))
hist(cauchy.draws, breaks = 2000, prob = T, xlim = c(-10, 10))
lines(x, 1 / (pi*(1+x^2)), col = "blue")
hist(cauchy.draws, breaks = 10000, prob = T, xlim = c(-10, 10))
lines(x, 1 / (pi*(1+x^2)), col = "blue")
help <- function(x) {
res <- ifelse(x >= -1 & x <= 2, 1/9*(4-x*x), 0)
return(res)
}
f <- function(vec) {
return(help(vec))
}
x1 <- seq(-3, 3, 0.01)
plot(x1, f(x1))
plot(x1, f(x1), lty = "l")
x1 <- seq(-3, 3, 0.01)
plot(x1, f(x1), type = "l")
ifelse(x1 >= -1 & x1 <= 2, 1/9*(4-x*x), 0)
f <- function(vec) {
res <- ifelse(vec >= -1 & vec <= 2, 1/9*(4-x*x), 0)
return(res)
}
x1 <- seq(-3, 3, 0.01)
plot(x1, f(x1), type = "l")
f <- function(vec) {
res <- ifelse(vec >= -1 & vec <= 2, 1/9*(4-vec*vec), 0)
return(res)
}
x1 <- seq(-3, 3, 0.01)
plot(x1, f(x1), type = "l")
1-pt(8/3, 16)
(1-pt(4/3, 16))*2
len(c(2, 3))
size(c(2, 3))
length(c(2, 3))
runif(, -1, 3)
runif(-1, 3)
runif(2, -1, 3)
runif(2, -1, 3)
runif(2, -1, 3)
runif(2, -1, 3)
size <- 10000
f.draws <- c()
while(length(f.draws) < size) {
y <- runif(1, -1, 3)
u <- runif(1)
if(f(y)/e(y) > u) {
f.draws <- c(f.draws, y)
}
}
e <- function(vec) {
res <- ifelse(vec >= -1 & vec <= 2, 4/9, 0)
}
size <- 10000
f.draws <- c()
while(length(f.draws) < size) {
y <- runif(1, -1, 3)
u <- runif(1)
if(f(y)/e(y) > u) {
f.draws <- c(f.draws, y)
}
}
size <- 10000
f.draws <- c()
while(length(f.draws) < size) {
y <- runif(1, -1, 3)
u <- runif(1)
if((f(y)/e(y)) > u) {
f.draws <- c(f.draws, y)
}
}
size <- 10000
f.draws <- c()
while(length(f.draws) < size) {
y <- runif(1, -1, 3)
u <- runif(1)
if(u < f(y)/e(y)) {
f.draws <- c(f.draws, y)
}
}
size <- 10000
f.draws <- c()
while(length(f.draws) < size) {
y <- runif(1, -1, 3)
u <- runif(1)
if(u < f(y)/e(y)) {
f.draws <- c(f.draws, y)
}
}
runif(1, -1, 3)
runif(1)
size <- 10000
f.draws <- c()
while(length(f.draws) < size) {
y <- runif(1, -1, 3)
u <- runif(1)
if(u < f(y) * 9 / 4) {
f.draws <- c(f.draws, y)
}
}
length(f.draws)
hist(f.draws)
e(runif(1, -1, 3))
e <- function(vec) {
res <- ifelse(vec >= -1 & vec <= 2, 4/9, 0)
return(res)
}
size <- 10000
f.draws <- c()
while(length(f.draws) < size) {
y <- runif(1, -1, 3)
u <- runif(1)
if(u < f(y)/e(y)) {
f.draws <- c(f.draws, y)
}
}
e <- function(vec) {
res <- ifelse(vec >= -1 & vec <= 2, 4/9, 0)
return(res)
}
size <- 10000
f.draws <- c()
while(length(f.draws) < size) {
y <- runif(1, -1, 3)
u <- runif(1)
if(u < f(y)/e(y)) {
f.draws <- c(f.draws, y)
}
}
e(runif(1, -1, 3))
f.draws <- c()
while(length(f.draws) < 10) {
y <- runif(1, -1, 3)
u <- runif(1)
print(f(y))
print(e(y))
f.draws <- c(f.draws, y)
}
f.draws <- c()
while(length(f.draws) < 10) {
y <- runif(1, -1, 3)
u <- runif(1)
print(y)
print(f(y))
print(e(y))
f.draws <- c(f.draws, y)
}
size <- 10000
f.draws <- c()
while(length(f.draws) < size) {
y <- runif(1, -1, 2)
u <- runif(1)
if(u < f(y)/e(y)) {
f.draws <- c(f.draws, y)
}
}
hist(f.draws)
size <- 10000
f.draws <- c()
while(length(f.draws) < size) {
y <- runif(1, -1, 2)
u <- runif(1)
if(u < f(y)/e(y)) {
f.draws <- c(f.draws, y)
}
}
hist(f.draws)
hist(f.draws, prob = T, breaks = 100)
hist(f.draws, prob = T, breaks = 100)
hist(f.draws, prob = T, breaks = 10)
hist(f.draws, prob = T, breaks = 10)
hist(f.draws, prob = T)
hist(f.draws, prob = T)
hist(f.draws, prob = T)
x2 <- seq(-1, 2, 0.01)
lines(x2, 1/9 * (4-x2^2), col = "blue")
hist(f.draws, prob = T)
lines(x2, 1/9 * (4-x2^2), col = "blue")
f1 <- function(vec) {
res <- 1/sqrt(2*pi) * exp(-1/2*x^2)
return(res)
}
x3 <- seq(-5, 5, 0.01)
curve(f1(x3), -5, 5)
curve(f1, -5, 5)
lines(f1(x3), col = "blue")
plot(f1(x3), col = "blue")
plot(f1(x3), col = "blue", type = "l")
plot(x3, f1(x3), col = "blue", type = "l")
x3 <- seq(-5, 5, 0.01)
plot(x3, f1(x3), col = "blue", type = "l")
x3
f1(x3)
x3^2
exp(x3^2)
f1 <- function(vec) {
res <- 1/sqrt(2*pi) * exp(-1/2*x^2)
return(res)
}
x3 <- seq(-5, 5, 0.01)
plot(x3, f1(x3), col = "blue", type = "l")
f1(x3)
f1 <- function(vec) {
res <- 1/sqrt(2*pi) * exp(-1/2*vec^2)
return(res)
}
plot(x3, f1(x3), col = "blue", type = "l")
e1 <- function(x, alpha) {
stopifnot(alpha > 0, alpha < 1)
res <- 1/(pi * (1+x^2) * alpha)
return(res)
}
exp(1/8)/(1+0.25)*sqrt(2/pi)
x4 <- seq(-10, 10, 0.01)
plot(x4, f1(x4), type = "l")
lines(x4, e1(x4))
plot(x4, f1(x4), type = "l")
lines(x4, e1(x4, 0.75))
plot(x4, f1(x4), type = "l")
lines(x4, e1(x4, 0.73))
plot(x4, f1(x4), type = "l")
lines(x4, e1(x4, 0.7))
plot(x4, f1(x4), type = "l")
lines(x4, e1(x4, 0.5))
plot(x4, f1(x4), type = "l")
lines(x4, e1(x4, 0.6))
plot(x4, f1(x4), type = "l")
lines(x4, e1(x4, 0.7))
plot(x4, f1(x4), type = "l")
lines(x4, e1(x4, 0.65))
plot(x4, f1(x4), type = "l")
lines(x4, e1(x4, 0.65), col = "red")
plot(x4, f1(x4), type = "l")
lines(x4, e1(x4, 0.65), col = "blue")
exp(1/8)/1.25*sqrt(2/pi)
plot(x4, f1(x4), type = "l")
lines(x4, e1(x4, 0.7232973), col = "blue")
plot(x4, f1(x4), type = "l")
lines(x4, e1(x4, exp(1/8)/1.25*sqrt(2/pi)), col = "blue")
plot(x4, f1(x4), type = "l")
lines(x4, e1(x4, 0.6), col = "blue")
plot(x4, f1(x4), type = "l")
lines(x4, e1(x4, 0.65), col = "blue")
exp(1/2) / 2 * sqrt(2/pi)
plot(x4, f1(x4), type = "l")
lines(x4, e1(x4, 0.65), col = "blue")
x4 <- seq(-10, 10, 0.01)
plot(x4, f1(x4), type = "l")
lines(x4, e1(x4, 0.65), col = "blue")
normal.sim <- function(n) {
res <- c()
while(length(res) < n) {
y <- cauchy.sim(1)
u <- runif(1)
if(u < f1(y)/e1(y, alpha = 0.65)) {
res <- c(res, y)
}
}
return(res)
}
normal.sim(10)
normal.draws <- normal.sim(10000)
hist(normal.draws, prob = T)
hist(normal.draws, prob = T)
x5 <- seq(-4, 4, 0.01)
lines(x45, 1/sqrt(2*pi) * exp(-1/2*x5^2), col = "blue")
hist(normal.draws, prob = T)
x5 <- seq(-4, 4, 0.01)
lines(x5, 1/sqrt(2*pi) * exp(-1/2*x5^2), col = "blue")
?sample
sample(c(-1, 2), 1)
sample(c(-1, 2), 1)
sample(c(-1, 2), 1)
sample(c(-1, 2), 1)
sample(c(-1, 2), 1)
sample(c(-1, 2), 1)
sample(c(-1, 2), 1)
sample(c(-1, 2), 1)
sample(c(-1, 2), 1)
sample(c(-1, 2), 1, prob=c(0.5, 0.5))
sample(c(-1, 2), 1, prob=c(0.5, 0.5))
sample(c(-1, 2), 1, prob=c(0.5, 0.5))
sample(c(-1, 2), 1, prob=c(0.5, 0.5))
sample(c(-1, 2), 1, prob=c(0.5, 0.5))
sample(c(-1, 2), 1, prob=c(0.5, 0.5))
sample(c(-1, 2), 1, prob=c(0.5, 0.5))
sample(c(-1, 2), 1, prob=c(0.5, 0.5))
sample(c(-1, 2), 1, prob=c(0.5, 0.5))
x <- 5
x.vals <- c(x)
while(x > 0) {
d <- sample(c(-1, 2), 1)
x <- x+d
x.vals <- c(x.vals, x)
}
x <- 1
x.vals <- c(x)
while(x > 0) {
d <- sample(c(-2, 1), 1)
x <- x+d
x.vals <- c(x.vals, x)
}
x <- 1
x.vals <- c(x)
while(x > 0) {
d <- sample(c(-2, 1), 1)
x <- x+d
x.vals <- c(x.vals, x)
}
x <- 1
x.vals <- c(x)
while(x > 0) {
d <- sample(c(-2, 1), 1)
x <- x+d
x.vals <- c(x.vals, x)
}
x <- 1
x.vals <- c(x)
while(x > 0) {
d <- sample(c(-2, 1), 1)
x <- x+d
x.vals <- c(x.vals, x)
}
x.vals
x <- 5
x.vals <- c(x)
while(x > 0) {
d <- sample(c(-2, 1), 1)
x <- x+d
x.vals <- c(x.vals, x)
}
x.vals
x <- 5
x.vals <- c(x)
while(x > 0) {
d <- sample(c(-2, 1), 1)
x <- x+d
if(x > 0) {
x.vals <- c(x.vals, x)
}
}
x.vals
plot(x.vals, type = "o")
random.walk <- function(x.start = 5, plot.walk = T) {
num.steps <- 0
x <- x.start
x.vals <- c(x)
while(x > 0) {
d <- sample(c(-2, 1), 1)
x <- x+d
if(x > 0) {
x.vals <- c(x.vals, x)
}
nums.steps <- nums.steps+1
}
if(plot.walk) {
plot(x.vals, type = "o")
}
return(list(num.steps, x.vals))
}
random.walk
random.walk
random.walk(x.start = 10, plot.walk = F)
random.walk <- function(x.start = 5, plot.walk = T) {
num.steps <- 0
x <- x.start
x.vals <- c(x)
while(x > 0) {
d <- sample(c(-2, 1), 1)
x <- x+d
if(x > 0) {
x.vals <- c(x.vals, x)
}
num.steps <- num.steps+1
}
if(plot.walk) {
plot(x.vals, type = "o")
}
return(list(num.steps, x.vals))
}
random.walk
random.walk(x.start = 10, plot.walk = F)
random.walk(())
random.walk(
random.walk(
a
)
)
random.walk()
random.walk()
random.walk()
random.walk()
steps <- c()
for(i = 0; i < 10000; i++) {
steps <- c()
for(i in c(1:10000)) {
steps <- c(steps, random.walk(plot.walk = F)$num.steps)
}
length(steps)
steps
random.walk(plot.walk = F)$num.steps
random.walk(plot.walk = F)[[1]]
steps <- c()
for(i in c(1:10000)) {
steps <- c(steps, random.walk(plot.walk = F)[[1]])
}
length(steps)
mean(steps)
random.walk <- function(x.start = 5, plot.walk = T, seed = NULL) {
if(seed != NULL) {
set.seed(seed)
}
num.steps <- 0
x <- x.start
x.vals <- c(x)
while(x > 0) {
d <- sample(c(-2, 1), 1)
x <- x+d
if(x > 0) {
x.vals <- c(x.vals, x)
}
num.steps <- num.steps+1
}
if(plot.walk) {
plot(x.vals, type = "o")
}
return(list(num.steps, x.vals))
}
random.walk()
random.walk <- function(x.start = 5, plot.walk = T, seed = NULL) {
if(!is.null(seed)) {
set.seed(seed)
}
num.steps <- 0
x <- x.start
x.vals <- c(x)
while(x > 0) {
d <- sample(c(-2, 1), 1)
x <- x+d
if(x > 0) {
x.vals <- c(x.vals, x)
}
num.steps <- num.steps+1
}
if(plot.walk) {
plot(x.vals, type = "o")
}
return(list(num.steps, x.vals))
}
random.walk()
random.walk()
random.walk(x.start = 5, plot.walk = F, seed = 33)
random.walk(x.start = 5, plot.walk = F, seed = 33)
g <- function(x) {
return(sqrt(1-x^2))
}
plot(seq(0,1,.01), g(seq(0,1,.01)), type="l", col="purple")
pi_hat <- 0
n1 <- 0
n <- 0
while(abs(pi - pi_hat) > 1/1000) {
u1 <- runif(1)
u2 <- runif(1)
if(u1^2 + u2^2 < 1) {
n1 <- n1+1
}
n <- n+1
pi_hat <- 4*n1/n
}
pi_hat
pi
pi-pi_hat
knitr::opts_chunk$set(echo = TRUE)
set.seed(0)
pi_hat
knitr::opts_chunk$set(echo = TRUE)
set.seed(0)
x1 <- seq(-3, 3, 0.01)
plot(x1, f(x1), type = "l")
x1 <- seq(-3, 3, 0.1)
plot(x1, f(x1), type = "l")
plot(x1, f(x1), type = "l", xlab = "x", ylab = "density")
x1 <- seq(-3, 3, 0.01)
plot(x1, f(x1), type = "l", xlab = "x", ylab = "density")
normal.draws <- normal.sim(10000)
hist(normal.draws, prob = T, xlim = c(-3, 3), xlab = "x", main = "normal simulation")
x5 <- seq(-4, 4, 0.01)
lines(x5, 1/sqrt(2*pi) * exp(-1/2*x5^2), col = "blue")
hist(normal.draws, prob = T, xlim = c(-3, 3), xlab = "x", main = "normal simulation", ylab = c(0, 4))
x5 <- seq(-4, 4, 0.01)
lines(x5, 1/sqrt(2*pi) * exp(-1/2*x5^2), col = "blue")
hist(normal.draws, prob = T, xlim = c(-3, 3), xlab = "x", main = "normal simulation", ylab = c(0, .4))
x5 <- seq(-4, 4, 0.01)
lines(x5, 1/sqrt(2*pi) * exp(-1/2*x5^2), col = "blue")
hist(normal.draws, prob = T, xlim = c(-3, 3), xlab = "x", main = "normal simulation", ylim = c(0, 0.4))
x5 <- seq(-4, 4, 0.01)
lines(x5, 1/sqrt(2*pi) * exp(-1/2*x5^2), col = "blue")
