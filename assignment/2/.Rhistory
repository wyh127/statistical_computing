?solve
solve(matrix(c(1, 0, 0, 1), 2))
solve(matrix(c(1, 0, 0, 2), 2))
A = matrix(c(1, -2, -2, 4), 2)
A - 5 * diag(2)
A - 5 * diag(1)
A - 5 * diag(2)
det(A - 5 * diag(2))
identity
identity(1)
identity(2)
A - 5*identuty
A - 5*identity
det(A - 5*identity)
iris
boxplot(Sepal.Length, iris)
boxplot(Sepal.Length, data = iris)
boxplot(data$Sepal.Length)
boxplot(iris$Sepal.Length)
boxplot(Sepal.Length, data = iris)
boxplot(iris$Sepal.Length, iris$Sepal.Width)
boxplot(iris$Sepal.Length, iris$Sepal.Width, Petal.Length, Petal.Width)
boxplot(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width)
boxplot(iris$Sepal.Length~iris$Species, iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width)
boxplot(iris$Sepal.Length~iris$Species)
boxplot(iris$Sepal.Length~iris$Species, iris$Sepal.Width~iris$Species, iris$Petal.Length~iris$Species, iris$Petal.Width~iris$Species)
boxplot(Sepal.Length~Species, data = iris)
?data()
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
?theme_bw()
midwest <- read.csv("http://goo.gl/G1K41K")
head(midwest)
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state, size=popdensity)) +
geom_smooth(method="loess", se=F) +
scale_x_continuous(name = "Area", limits = c(0, 0.1)) +
scale_y_continuous(name = "Population", limits = c(0, 500000)) +
labs(subtitle="Area Vs Population",
title="Scatterplot",
caption = "Source: midwest")
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state, size=popdensity)) +
geom_smooth(method="loess", se=F) +
scale_x_continuous(name = "Area", limits = c(0, 0.1)) +
scale_y_continuous(name = "Population", limits = c(0, 500000)) +
labs(subtitle="Area Vs Population",
title="Scatterplot",
caption = "Source: midwest")
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
geom_point(aes(col=state, size=popdensity)) +
geom_smooth(method="loess", se=F) +
scale_x_continuous(name = "Area", limits = c(0, 0.1)) +
scale_y_continuous(name = "Population", limits = c(0, 500000)) +
labs(subtitle="Area Vs Population",
title="Scatterplot",
caption = "Source: midwest")
gg <- ggplot(midwest, aes(x=area, y=poptotal)) +
labs(subtitle="Area Vs Population", q
q
gg
options(scipen=999)
gg
pwd
getwd()
library("ISLR", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
names(Default)
head(Default)
dim(Default)
ggplot(Default, aes(x = balance, y = income)) + geom_ponit(aes(color = default))
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
ggplot(Default, aes(x = balance, y = income)) + geom_ponit(aes(color = default))
ggplot(Default, aes(x = balance, y = income)) + geom_point(aes(color = default))
ggplot(Default, aes(x = balance, y = income)) + geom_density(aes(color = default))
ols_reg <- lm(defalut_numeric ~ balance, Default)
ols_reg <- lm(default_numeric ~ balance, Default)
summary(ols_reg)
log_reg <- glm(default_numeric ~ balance, data = Defalut, family = binomial)
log_reg <- glm(default_numeric ~ balance, data = Default, family = binomial)
summary(log_reg)
x = rep(100:2000, 100)
x
x = rep(100:100:2000)
x
x = seq(100:2000, 100)
x = seq(100, 2000, 100)
x
predict(log_reg, x)
predict(log_reg, x)
predict(ols_reg, x)
predict(log_reg, data = x)
y = predict(log_reg, data = x)
plot(x, y)
predict(log_reg, data = c(1, 2))
log_reg
x = as.data.frame(x)
x
predict(log_reg, data = x
)
predict(log_reg, data = x)
predict.glm(log_reg, x)
predict.glm(log_reg, data = x)
log_reg
predict.glm(logreg_default, data = x)
head(Smarket)
dim(Smarket)
sub = within(Smarket, "Direction")
head(sub)
sub = within(Smarket, rm("Direction"))
head(sub)
dim(sub)
corr = cor(sub)
corr
install.packages("corrplot")
corrplot(corr)
library("corrplot", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
corrplot(corr)
Smarket$Direc_num <- ifelse(Smarket$Direction == "up", 1, 0)
head(Smarket)
Smarket$Direc_num <- ifelse(Smarket$Direction == up, 1, 0)
Smarket$Direc_num <- ifelse(Smarket$Direction == 'up', 1, 0)
head(Smarket)
Smarket$Direc_num <- ifelse(Smarket$Direction == 'Up', 1, 0)
head(Smarket)
logit <- glm(Direc_num ~ Lag1 + Lag2 + Lag3 + Lag4 + Lag5, Smarket, family = binomial)
summary(logit)
predict(logit, type = "response")
plot(predict(logit, type = "response"))
head(mtcars)
dim(mtcars)
hist(mtcars$mpg)
hist(mtcars$cyl)
hist(mtcars$hp)
X <- matrix(rnorm(30), nrow=5, ncol=6)
X
apply(X, 2, sum)
apply(X, 2, mean)
?lapply()
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
x
x[0]
x[a]
x[[0]]
x[[a]]
x[["a"]]
Q1 <- matrix(c(rep(1, 4), rep(2, 4), rep(3, 4), rep(4, 4)),4,4)
Q1
print(Q1)
Q2 <- mapply(rep,1:4,4)
Q2
a1 <- c(2, 3, 6, 7, 10)
a2 <- c(1.88, 2.05, 1.70, 1.60, 1.78) a3 <- c(80, 90, 70, 50, 75)
a1 <- c(2, 3, 6, 7, 10)
a2 <- c(1.88, 2.05, 1.70, 1.60, 1.78)
a3 <- c(80, 90, 70, 50, 75)
cbind(a1, a2, a3)
head(iris)
tapply(iris$Species, iris$Sepal.Length, mean)
tapply(iris$Sepal.Length, iris$Species, mean)
sub = within(iris, rm("Species"))
head(sub)
t(c(1, 2, 3, 4))
c(1, 2, 3, 4)
sub * c(1, 2, 3, 4)
matrix(sub)
sub
data.matrix(sub)
sub
matrix(sub) * matrix(c(1, 2, 3, 4), 4, 1)
matrix(sub) %*% matrix(c(1, 2, 3, 4), 4, 1)
matrix(c(1, 2, 3, 4), 4, 1)
data.matrix(sub) %*% matrix(c(1, 2, 3, 4), 4, 1)
sqrt(2)
1:5
t(1:5)
v <- 1:5
t(v)
vnorm <- function(v) {
return v / sqrt((t(v) %*% v))
vnorm <- function(v) {
return (v / sqrt((t(v) %*% v)))
}
vnorm(v)
as.matrix(v)
vnorm <- function(v) {
tmp = as,matrix(v)
vnorm <- function(v) {
tmp = as.matrix(v)
return (v / sqrt((t(tmp) %*% tmp)))
}
vnorm(v)
vnorm <- function(v) {
tmp = as.matrix(v)
return (v / as.vector(sqrt((t(tmp) %*% tmp))))
}
vnorm(v)
as.matrix(sub)
sub
is_square <- function(M) {
return (nrow(M) == ncol(M))
}
mapply(rep, c(1, 2, 3, 4), 4)
is_square(mapply(rep, c(1, 2, 3, 4), 4))
mtrace <- function(M) {
if(is_square(M)) {
return tr(M)
mtrace <- function(M) {
if(is_square(M)) {
return (tr(M))
}
return ("not a square matrix")
}
c(1:2)
c(1:4)
mtrace <- function(M) {
if(is_square(M)) {
res = 0
for(i in 1:nrow(M)) {
res += M[i][i]
mtrace <- function(M) {
if(is_square(M)) {
res = 0
for(i in 1:nrow(M)) {
res = res + M[i][i]
}
return (tr(M))
}
return ("not a square matrix")
}
mtrace(mapply(rep, c(1, 2, 3, 4), 4))
mtrace <- function(M) {
if(is_square(M)) {
res = 0
for(i in 1:nrow(M)) {
res = res + M[i][i]
}
return res
mtrace <- function(M) {
if(is_square(M)) {
res = 0
for(i in 1:nrow(M)) {
res = res + M[i][i]
}
return (res)
}
return ("not a square matrix")
}
mtrace(mapply(rep, c(1, 2, 3, 4), 4))
mapply(rep, c(1, 2, 3, 4), 4)
mtrace <- function(M) {
if(is_square(M)) {
res = 0
for(i in c(1:nrow(M))) {
res = res + M[i][i]
}
return (res)
}
return ("not a square matrix")
}
mtrace(mapply(rep, c(1, 2, 3, 4), 4))
mtrace <- function(M) {
if(is_square(M)) {
res = 0
for(i in c(1:nrow(M))) {
res = res + M[i][i]
}
return (res)
}
else {
return ("not a square matrix")
}
}
mtrace(mapply(rep, c(1, 2, 3, 4), 4))
mtrace <- function(M) {
if(is_square(M)) {
res = 0
for(i in c(1:nrow(M))) {
res = res + M[i][i]
}
return (res)
} else {
return ("not a square matrix")
}
}
mtrace(mapply(rep, c(1, 2, 3, 4), 4))
mtrace <- function(M) {
if(is_square(M)) {
res = 0
for(i in c(1:nrow(M))) {
res = res + M[i][i]
}
return (res)
}
}
mtrace(mapply(rep, c(1, 2, 3, 4), 4))
nrow(mapply(rep, c(1, 2, 3, 4), 4))
mapply(rep, c(1, 2, 3, 4), 4)[1][1]
mapply(rep, c(1, 2, 3, 4), 4)[2][2]
mapply(rep, c(1, 2, 3, 4), 4)
mapply(rep, c(1, 2, 3, 4), 4)[1, 2]
mtrace <- function(M) {
if(is_square(M)) {
res = 0
for(i in c(1:nrow(M))) {
res = res + M[i, i]
}
return (res)
}
return ("not squre matrix")
}
mtrace(mapply(rep, c(1, 2, 3, 4), 4))
mtrace(mapply(rep, c(1, 2, 3, 4), 5))
head(mtcars[, c(mpg, disp, hp, drat, wt)])
head(mtcars[, c("mpg", "disp", "hp", "drat", "wt")])
M = as.matrix(mtcars[, c("mpg", "disp", "hp", "drat", "wt")])
head(M)
M
data.matrix(M)
type(M)
typeof(M)
mode(M)
class(M)
apply(M, 2, mean)
Mc = scale(M, scale = FALSE)
M - apply(M, 2, mean)
Mc
x = apply(M, 2, mean)
class(x)
mode(x)
typeof(x)
x = as.matrix(x)
x
x = t(x)
x
M - x
x = as.vector(x)
x
M-x
apply(Mc, 2, mean)
apply(M, 2, max)
sweep(M, 2, apply(M, 2, mean), "-")
sweep(M, 2, apply(M, 2, max), "/")
temp = sweep(M, 2, apply(M, 2, min), "-")
M1 = sweep(M, 2, apply(M, 2, max), "/")
M1
apply(M, 2, min)
apply(M1, 2, min)
M1 = sweep(temp, 2, apply(temp, 2, max), "/")
apply(M1, 2, min)
apply(M1, 2, max)
apply(Mc, 2, sd)
temp = sweep(Mc, 2, apply(Mc, 2, sd), "/")
Mcov = t(temp) %*% temp
Mcov
cov(M)
(t(Mc) %*% Mc) / (nrow(Mc) - 1)
Mcov / (nrow(Mc) - 1)
cor(M)
cyl <- factor(mtcars$cyl)
cyl
dummyif <- function(arg, all = TRUE) {
if(all) {
return (nlevels(arg))
} else {
return (nlevels(arg)-1)
}
}
dummyif(cyl)
dummyif(cyl, all = FALSE)
head(state.x77)
dim(state.x77)
head(USArrests)
dim(USArrests)
temp <- svd(USArrests)
class(USArrests)
temp
temp$u %*% diag(temp$d) %*% temp$v
temp$u %*% diag(temp$d) %*% t(temp$v)
state2 <- state.x77[, c(1:5)]
c(1:5)
head(state2)
class(state2)
temp <- svd(state2)
for(i in 1:5) {}
for(i in 1:5) {
print(i)
}
prod = 0
for(i in 1:5) {
prod += temp$u[, i] %*% temp$d[i] %*% t(temp$v[, i])
prod = 0
for(i in 1:5) {
prod = prod + temp$u[, i] %*% temp$d[i] %*% t(temp$v[, i])
}
prod = 0
for(i in 1:5) {
prod = prod + temp$d[i] * (temp$u[, i] %*% t(temp$v[, i]))
}
prod
state2
temp
temp <- svd(state.x77)
temp$u
plot(c(1, 2, 3), c(2, 3, 4))
plot(temp$u[, 1], temp$u[, 2])
row.names(state.x77)
library(ggplot2)
ggplot(temp, aes(x = u[, 1], y = u[, 2])) + geom_text(aes(lable = row.names(state.x77)))
ggplot(aes(x = temp$u[, 1], y = temp$u[, 2])) + geom_text(aes(lable = row.names(state.x77)))
t = as.data.frame(cbind(temp$u[, 1], temp$u[, 2]))
t
ggplot(data = t, aes(x = V1, y = V2)) + geom_text(aes(lable = row.names(state.x77)))
ggplot(data = t, aes(x = V1, y = V2)) + geom_text(aes(label = row.names(state.x77)))
X <- sweep(state.x77, 2, apply(state.x77, 2, mean), '-')
apply(X, 2, sum)
S <- t(X) %*% X
S
S / (nrow(state.x77)-1)
cov(X)
solve(S)
eigen(S)
temp <- eigen(S)
temp$vectors %*% diag(temp$values) %*% t(temp$vectors)
S
t(temp$vectors)
solve(temp$vectors)
setwd("~/Desktop/ColumbiaUniversity/1/statisticalComputing/assignment/2")
knitr::opts_chunk$set(echo = TRUE)
# load data
housing <- read.csv("NYChousing.csv")
# no. of rows and colums
dim(housing)
apply(is.na(housing), 2, sum)
# remove the rows for which the variable Value is NA.
ind <- is.na(housing$Value)
ind = !ind
housing <- housing[ind, ]
# create logarithm of "Value"
housing$logValue <- log(housing$Value, 10)
summary(housing$logValue)
# create logarithm of "UnitCount"
housing$logUnits <- log(housing$UnitCount, 10)
# create a new variable "after1950"
housing$after1950 <- ifelse(housing$YearBuilt >= 1950, TRUE, FALSE)
# plot logValue against logUnits
library(ggplot2)
ggplot(housing, aes(x = logUnits, y = logValue)) + geom_point(aes(color = logValue)) + labs(x = "logUnits", y = "logValue", title = "logValue VS logUnits")
# color data by "after1950"
# solution 1
ggplot(housing, aes(x = logUnits, y = logValue)) + geom_point(aes(color = after1950)) + labs(x = "logUnits", y = "logValue", title = "logValue VS logUnits")
# solution 2
# plot(housing$logUnits, housing$logValue, col = factor(housing$after1950), xlab = "logUnits", ylab = "logValue")
# legend("bottomright", legend = levels(factor(housing$after1950)), fill = unique(factor(housing$after1950)))
# calculate correlation
cor(housing[, c("logValue", "logUnits")])
ind1 <- housing$Borough == "Manhattan"
cor(housing[ind1, c("logValue", "logUnits")])
ind2 <- housing$Borough == "Brooklyn"
cor(housing[ind2, c("logValue", "logUnits")])
ind3 <- housing$after1950 == TRUE
cor(housing[ind3, c("logValue", "logUnits")])
ind4 <- housing$after1950 == FALSE
cor(housing[ind4, c("logValue", "logUnits")])
# plot logValue against logUnits for Manhattan and Brooklyn
ind5 <- housing$Borough == "Manhattan" | housing$Borough == "Brooklyn"
sub <- housing[ind5, c("logValue", "logUnits", "Borough")]
ggplot(sub, aes(x = logUnits, y = logValue)) + geom_point(aes(color = Borough)) + labs(x = "logUnits", y = "logValue", title = "logValue VS logUnits in Manhattan and Brooklyn")
median(housing[housing$Borough == "Manhattan", ]$Value)
manhat.props <- c()
for (props in 1:nrow(housing)) {
if (housing$Borough[props] == "Manhattan") {
manhat.props <- c(manhat.props, props)
}
}
med.value <- c()
for (props in manhat.props) {
med.value <- c(med.value, housing$Value[props])
}
med.value <- median(med.value, na.rm = TRUE)
med.value
median(housing[housing$Borough == "Manhattan", ]$Value, na.rm = TRUE)
apply(housing[housing$Borough == "Manhattan", ]$Value, 2, median(na.rm = TRUE))
apply(housing[housing$Borough == "Manhattan", ]$Value, 2, median)
ggplot(housing, aes(x = Borough, y = logValue)) + geom_boxplot(aes(color = Borough))
housing$Borough
for(name in c("Bronx", "Brooklyn", "Manhattan", "Queens", "Staten Island")) {
temp <- median(housing[housing$Borough == name, ]$Value, na.rm = TRUE)
temp
}
temp
temp <- c()
for(name in c("Bronx", "Brooklyn", "Manhattan", "Queens", "Staten Island")) {
temp <- c(temp, median(housing[housing$Borough == name, ]$Value, na.rm = TRUE))
}
temp
temp <- c()
for(name in c("Bronx", "Brooklyn", "Manhattan", "Queens", "Staten Island")) {
temp <- c(temp, median(housing[housing$Borough == name, ]$Value, na.rm = TRUE))
}
temp
# plot logValue against logUnits
library(ggplot2)
ggplot(housing, aes(x = logUnits, y = logValue)) + geom_point(aes(color = logValue)) +
labs(x = "logUnits", y = "logValue", title = "logValue VS logUnits")
# color data by "after1950"
# solution 1
ggplot(housing, aes(x = logUnits, y = logValue)) + geom_point(aes(color = after1950)) +
labs(x = "logUnits", y = "logValue", title = "logValue VS logUnits")
# solution 2
plot(housing$logUnits, housing$logValue, col = factor(housing$after1950),
xlab = "logUnits", ylab = "logValue")
# legend("bottomright", legend = levels(factor(housing$after1950)),
#   fill = unique(factor(housing$after1950)))
