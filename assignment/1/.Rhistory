y=x
f=outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
f=outer(x,y,function(x,y)cos(y)/(1+x^4))
contour(x,y,f)
?outer
install.packages("ISLR")
install.packages("glmnet")
install.packages("pls")
install.packages("splines2")
install.packages("tree")
install.packages("randomForest")
install.packages("gbm")
install.packages("ROCR")
ls()
library("ISLR", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
Auto=read.table("Auto.data")
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
fix(Boston)
?fix
?names
names(Boston)
head(Boston)
lm.fit=lm(medv~lstat)
attach(Boston)
lm.fit=lm(medv~lstat)
summary(lm.fit)
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="confidence")
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="prediction")
plot(lstat,medv)
abline(lm.fit)
abline(lm.fit, col = "blue")
abline(lm.fit, col = "red")
abline(lm.fit,lwd=3)
?lwd
?abline
install.packages("x12")
id <- c(1,2,3)
name <- c("Jack","Tom","Mark")
age <- c(22,30,27)
mydata <- data.frame(id,age,name)
mydata = edit(mydata)
install.packages("XQuartz")
id <- c(1,2,3)
name <- c("Jack","Tom","Mark")
age <- c(22,30,27)
mydata <- data.frame(id,age,name)
mydata = edit(mydata)
id <- c(1,2,3)
name <- c("Jack","Tom","Mark")
age <- c(22,30,27)
mydata <- data.frame(id,age,name)
mydata = edit(mydata)
mydata <- edit(mydata)
id <- c(1,2,3)
name <- c("Jack","Tom","Mark")
age <- c(22,30,27)
mydata <- data.frame(id,age,name)
mydata <- edit(mydata)
y=rnorm(100)
mean(y)
sd(y)
var(y)
sqrt(y)
sqrt(var(y))
?set.seed
x=seq(1,10, 2)
x
x=seq(-pi,pi,length=50)
y=x
f=outer(x,y,function(x,y)cos(y)/(1+x^2))
contour(x,y,f)
contour(x,y,f,nlevels=45,add=T)
fa=(f-t(f))/2
contour(x,y,fa,nlevels=15)
image(x,y,fa)
persp(x,y,fa)
persp(x,y,fa,theta=30)
persp(x,y,fa,theta=30,phi=20)
persp(x,y,fa,theta=30,phi=70)
persp(x,y,fa,theta=30,phi=40)
?persp
Auto=read.table("Auto.data")
library("ISLR", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
Auto=read.table("Auto.data")
setwd("~/Desktop/iBooks/ISLR/ISLR data")
Auto=read.table("Auto.data")
Auto=read.table("Auto.rda")
load("/Users/apple/Desktop/iBooks/ISLR/ISLR data/Auto.rda")
Auto
fix(Auto)
edit(Auto)
setwd("~/")
plot(cylinders, mpg)
plot(cylinders, mpg, data = Auto)
attach(Auto)
plot(cylinders, mpg)
load("/Users/apple/Desktop/iBooks/ISLR/ISLR data/Auto.rda")
attach(Auto)
plot(cylinders, mpg)
pairs(Auto)
pairs(~ mpg + displacement + horsepower + weight + acceleration, Auto)
summary(mpg)
identify(horsepower,mpg,name)
?predict
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("ISLR", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
attach(Boston)
rm(age)
attach(Boston)
head(Boston)
rm(f)
rm(ls())
rm(list = ls())
Boston
lm.fit=lm(medv~lstat)
summary((lm.fit))
names((Boston))
plot(lstat,medv)
abline(lm.fit)
predict(lm.fit, lstat=(c(5,10,15)))
predict(lm.fit,data.frame(lstat=(c(5,10,15))), interval="confidence")
predict(lm.fit, lstat=(c(5,10,15)), interval="confidence")
plot(lstat,medv,pch=20)
plot(lstat,medv)
plot(lstat,medv,pch= "+")
plot(predict(lm.fit), residuals(lm.fit))
plot(predict(lm.fit), rstudent(lm.fit))
plot(hatvalues(lm.fit))
liba
library((Smarket))
names((Smarket))
dim(Smarket)
pairs(Smarket)
cor(Smarket)
cor(Smarket[,-9])
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,data=Smarket,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
glm.probs
plot(glm.probs)
?contracts
?contrasts
contrasts(Direction)
attach(Smarket)
contrasts(Direction)
glm.pred=rep("Down",1250)
glm.pred(glm.probs > .5)="up"
glm.pred[glm.probs > .5]="up"
glm.pred
table(glm.pred,Direction)
mean(glm.pred==Direction)
(507+145)/1250
x = 1:9
x
matrix(x)
x
matrix(x, 3, 3)
matrix(x, 3, 3, byrow = TRUE)
diag()
diag(1)
diag(2)
diag(7)
diag(5)
a1 <- c(2, 3, 6, 7, 10)
a2 <- c(1.88, 2.05, 1.70, 1.60, 1.78)
a3 <- c(80, 90, 70, 50, 75)
cbind(a1, a2, a3)
b1 <- c(1, 4, 5, 8, 9)
b2 <- c(1.22, 1.05, 3.60, 0.40, 2.54)
b3 <- c(20, 40, 30, 80, 100)
rbind(b1, b2, b3)
head(iris)
head(iris[: 3])
head(iris(: 3))
head(iris(0: 3))
iris[1:, 1:4]
iris[c(1, ), c(1, 4)]
iris[, c(1, 4)]
iris
iris[, c(1:4)]
coe = 1:4
coe
iris[, c(1:4)] * coe
m = matrix(iris[, c(1:4)])
m
remove(m)
m = matrix(iris[c(1:150), c(1:4)])
m
iris[c(1:150), c(1:4)]
m = iris[, c(1:4)].matrix()
iris[, c(1:4)]
iris[, c(1:4)].matrix()
m = as.matrix(iris[, c(1:4)])
m
coe
coe = as.matrix(coe, 4, 1)
coe
m %*% coe
5.1*1 + 3.5*2 + 1.4*3 + 0.2*4
v <- 1:5
v
sqrt(4)
vnorm = function(vec) {
vec_t = t(vec)
square_sum = vec %*% vec_t
sqrt(square_sum)
}
vnorm(v)
vnorm = function(vec) {
vec_t = t(vec)
square_sum = vec_t %*% vec
sqrt(square_sum)
}
vnorm(v)
v ** 2
sum(v)
sum(v ** 2)
sqrt(55)
head(mtcars)
mtcars
M = as.matrix(mtcars[, c(1, 3, 4, 5, 6)])
M
apply(M, 2, mean)
Mc = scale(M, TRUE, FALSE)
Mc
apply(Mc, 2, mean)
apply(M, 2, max)
sweep(M, 2, mean)
sweep(M, 2, apply(M, 2, mean))
head(state.x77)
SVD = svd(state.x77)
SVD
U = SVD$u
V = SVD$v
D = diag(SVD$d)
state.x77 == U %*% D %*% t(V)
D
U %*% D %*% t(V)
P = U %*% D %*% t(V)
P == state.x77
state.x77
P == state.x77
library("ISLR", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
names(Default)
dim(Default)
summary(Default)
summary(subset(Default, default == 'Yes'))
summary(subset(Default, default == 'No'))
default_numeric = rep(0, nrow(Default))
default_numeric[Default$default == 'Yes'] = 1
Default$default_numeric = default_numeric
ols_reg = lm(default_numeric ~ balance, data = Default)
summary(ols_reg)
ols_reg
logreg_default = glm(default ~ balance, family = binomial, data = Default)
summary(logreg_default)
library("MASS", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("mvtnorm")
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
install.packages("caret")
install.packages("e1071")
library("class", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
x = c(2, -1, 3, 4)
X = as.matrix(x, 2, 2)
X
X
X = as.matrix(x, 2, 2)
X
x = as.matrix(x, 2, 2)
x
x = c(2, -1, 3, 4)
x
x = as.matrix(x, 2, 2)
x
x = as.matrix(x, nrow = 2, ncol = 2)
x
x = c(2, 3, 4, 5)
x
X = as.matrix(x, 2, 2)
X
X = as.matrix(x, 1, 4)
X
x = c(1, 2, 3, 4, 5, 6)
X = as.matrix(x, 2)
X
x = c(2, -1, 3, 4)
X = matrix(x, 2, 2)
X
diag(2)
x = c(2, -1, 3, 4)
X = matrix(x, 2, 2)
y = c(2, 1, 0, -2, 1, 3)
Y = matrix(y, 2, 3)
z = c(1, -1, 0, 1, 1, 2)
Z = matrix(z, 3, 2)
w = c(1, 8, 0, 3)
W = matrix(w, 2, 2)
I = diag(2)
X
Y
Z
W
I
X+Y
X %*% Y
inner_product() <- functiin(v, u) {
return t(v) %*% u
}
inner_product() <- function(v, u) {
return t(v) %*% u
}
inner_product() <- function(v, u) {
return (t(v) %*% u)
}
inner_product <- function(v, u) {
return (t(v) %*% u)
}
v = c(1, 3, 5)
u = c(1, 2, 3)
inner_product(v, u)
projection <- function(v, u) {
return (inner_product(v, u) / inner_product(u, u) * u)
}
projection(v, u)
projection <- function(v, u) {
coe = inner_product(v, u) / inner_product(u, u)
return (coe * u)
}
projection(v, u)
u
3 * c(1, 2)
projection <- function(v, u) {
coe = inner_product(v, u) / inner_product(u, u)
res = coe * u
return res
}
projection <- function(v, u) {
coe = inner_product(v, u) / inner_product(u, u)
res = coe * u
return (res)
}
projection(v, u)
projection <- function(v, u) {
coe = as.vector(inner_product(v, u) / inner_product(u, u))
res = coe * u
return (res)
}
projection(v, u)
projection <- function(v, u) {
coe = c(inner_product(v, u) / inner_product(u, u))
res = coe * u
return (res)
}
projection(v, u)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
---
title: "Untitled"
author: "cx"
date: "9/7/2018"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
## R Markdown
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r cars}
summary(cars)
```
## Including Plots
You can also embed plots, for example:
```{r pressure, echo=FALSE}
plot(pressure)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
# sad
getwd
getwd()
x = c(1, 2, 4)
x = c(1, 2, 3)
y = 1:3
x == y
x
y
matrix(1:4, 2, 2)
c(1, 2) == 1:2
str
str(1)
??"structure"
install.packages("pixmap")
library("pixmap", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
library("glmnet", lib.loc="/Library/Frameworks/R.framework/Versions/3.5/Resources/library")
plot(matrix((1, 0, 1, 0), 2))
m = matrix((1, 0, 0, 1), 2)
m = matrix(c(1, 0, 0, 1), 2)
plot(m)
?solve
solve(matrix(c(1, 0, 0, 1), 2))
solve(matrix(c(1, 0, 0, 2), 2))
A = matrix(c(1, -2, -2, 4), 2)
A - 5 * diag(2)
A - 5 * diag(1)
A - 5 * diag(2)
det(A - 5 * diag(2))
identity
identity(1)
identity(2)
A - 5*identuty
A - 5*identity
det(A - 5*identity)
iris
boxplot(Sepal.Length, iris)
boxplot(Sepal.Length, data = iris)
boxplot(data$Sepal.Length)
boxplot(iris$Sepal.Length)
boxplot(Sepal.Length, data = iris)
boxplot(iris$Sepal.Length, iris$Sepal.Width)
boxplot(iris$Sepal.Length, iris$Sepal.Width, Petal.Length, Petal.Width)
boxplot(iris$Sepal.Length, iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width)
boxplot(iris$Sepal.Length~iris$Species, iris$Sepal.Width, iris$Petal.Length, iris$Petal.Width)
boxplot(iris$Sepal.Length~iris$Species)
boxplot(iris$Sepal.Length~iris$Species, iris$Sepal.Width~iris$Species, iris$Petal.Length~iris$Species, iris$Petal.Width~iris$Species)
boxplot(Sepal.Length~Species, data = iris)
setwd("~/Desktop/ColumbiaUniversity/1/statisticalComputing/assignment/1")
knitr::opts_chunk$set(echo = TRUE)
titanic <- read.table("Titanic.txt", header = TRUE, as.is = TRUE)
nrow(titanic)
ncol(titanic)
titanic$Survivor.Word <- "survived"
ind = titanic$Survived == 0
titanic[ind, ]$Survivor.Word <- "died"
apply(titanic[, c("Survived", "Age", "Fare")], 2, mean)
ind_1 = titanic$Sex == "female"
sum(titanic[ind_1, ]$Survived == 1)
nrow(titanic[ind_1, ]$Survived == 1)
titanic[ind_1, ]$Survived == 1
nrow(titanic[ind_1, ])
p1 = sum(titanic[ind_1, ]$Survived == 1) / nrow(titanic)
p1
round(p1, 2)
ind2 = titanic$Survived == 1
sum(titanic[ind2, ]$Sex == "female")
nrow(titanic[ind2, ])
p2 = sum(titanic[ind2, ]$Sex == "female") / nrow(titanic[ind2, ])
p2
233/342
round(p2, 2)
classes <- sort(unique(titanic$Pclass))
Pclass.Survival <- vector("numeric", length = 3)
names(Pclass.Survival) <- classes
Pclass.Survival
head(titanic)
ind = titanic$Pclass == 1
sum(titanic[ind, ]$Survived == 1)
nrow(titanic[ind, ])
136/216
for(i in 1:3) {
ind = titanic$Pclass == i
p = sum(titanic[ind, ]$Survived == i) / nrow(titanic[ind, ])
Pclass.Survival[i] = round(p, 2)
}
Pclass.Survival
Pclass.Survival
for(i in 1:3) {
ind = titanic$Pclass == i
p = sum(titanic[ind, ]$Survived == i) / nrow(titanic[ind, ])
Pclass.Survival[i] = round(p, 2)
}
Pclass.Survival
for (i in 1:3) {
ind = titanic$Pclass == i
p = sum(titanic[ind, ]$Survived == i) / nrow(titanic[ind, ])
Pclass.Survival[i] = round(p, 2)
}
Pclass.Survival
ind
remove(ind)
for (i in 1:3) {
ind = titanic$Pclass == i
p = sum(titanic[ind, ]$Survived == i) / nrow(titanic[ind, ])
Pclass.Survival[i] = round(p, 2)
}
Pclass.Survival
for (i in 1:3) {
ind_temp = titanic$Pclass == i
p_temp = sum(titanic[ind_temp, ]$Survived == i) / nrow(titanic[ind_temp, ])
Pclass.Survival[i] = round(p_temp, 2)
}
Pclass.Survival
ind = titanic$Pclass == i
ind = titanic$Pclass == 2
sum(titanic[ind, ]$Survived == 2)
for (i in 1:3) {
ind_temp = titanic$Pclass == i
p_temp = sum(titanic[ind_temp, ]$Survived == 1) / nrow(titanic[ind_temp, ])
Pclass.Survival[i] = round(p_temp, 2)
}
Pclass.Survival
?tapply
c(1, 2)
Pclass.Survival
Pclass.Survival2 <- vector("numeric", length = 3)
names(Pclass.Survival2) <- classes
Pclass.Survival2 <- tapply(titanic$Survived, titanic$Pclass, mean)
Pclass.Survival2
round(Pclass.Survival2, 2)
head(titanic$Survivor.Word)
head(titanic$Survived)
