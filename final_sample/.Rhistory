geom_line(aes(x = x, y = y3), color = "blue") +
labs(y = "density") +
legend(80, 0.15, c("f1", "f2", "f3"), pch = c(19, 19, 19))
ggplot(data = df) + geom_line(aes(x = x, y = y1)) +
geom_line(aes(x = x, y = y2), color = "red") +
geom_line(aes(x = x, y = y3), color = "blue") +
labs(y = "density")
ggplot(data = df) + geom_line(aes(x = x, y = y1)) +
geom_line(aes(x = x, y = y2), color = "red") +
geom_line(aes(x = x, y = y3), color = "blue") +
labs(y = "density") +
scale_colour_manual(values = c("black", "red", "blue"))
ggplot(data = df) + geom_line(aes(x = x, y = y1)) +
geom_line(aes(x = x, y = y2), color = "red") +
geom_line(aes(x = x, y = y3), color = "blue") +
labs(y = "density") +
scale_colour_manual(values = c("black", "red", "blue"), labels = c("f1", "f2", "f3"))
ggplot(data = df) + geom_line(aes(x = x, y = y1, col = y1)) +
geom_line(aes(x = x, y = y2, col = y2), color = "red") +
geom_line(aes(x = x, y = y3, col = y3), color = "blue") +
labs(y = "density")
ggplot(data = df) + geom_line(aes(x = x, y = y1, col = y1)) +
geom_line(aes(x = x, y = y2, col = y2), color = "red") +
geom_line(aes(x = x, y = y3, col = y3), color = "blue") +
labs(y = "density") +
scale_colour_manual(labels = c("f1", "f2", "f3"))
ggplot(data = df) + geom_line(aes(x = x, y = y1, col = y1)) +
geom_line(aes(x = x, y = y2, col = y2), color = "red") +
geom_line(aes(x = x, y = y3, col = y3), color = "blue") +
labs(y = "density") +
scale_colour_manual(values = c("black", "red", "blue"), labels = c("f1", "f2", "f3"))
ggplot(data = df) + geom_line(aes(x = x, y = y1, col = y1)) +
geom_line(aes(x = x, y = y2, col = y2)) +
geom_line(aes(x = x, y = y3, col = y3)) +
labs(y = "density")
ggplot(data = df) + geom_line(aes(x = x, y = y1)) +
geom_line(aes(x = x, y = y2), color = "red") +
geom_line(aes(x = x, y = y3), color = "blue") +
labs(y = "density")
ggplot(data = df) + geom_line(aes(x = x, y = y1, col = "y1")) +
geom_line(aes(x = x, y = y2, col = "y2")) +
geom_line(aes(x = x, y = y3, col = "y3"), color = "blue") +
labs(y = "density")
ggplot(data = df) + geom_line(aes(x = x, y = y1, col = "y1")) +
geom_line(aes(x = x, y = y2, col = "y2")) +
geom_line(aes(x = x, y = y3, col = "y3")) +
labs(y = "density")
ggplot(data = df) + geom_line(aes(x = x, y = y1, col = "f1")) +
geom_line(aes(x = x, y = y2, col = "f2")) +
geom_line(aes(x = x, y = y3, col = "f3")) +
labs(y = "density")
ggplot(data = df) + geom_line(aes(x = x, y = y1, col = "f1")) +
geom_line(aes(x = x, y = y2, col = "f2")) +
geom_line(aes(x = x, y = y3, col = "f3")) +
labs(y = "density") +
scale_color_discrete("functions")
ggplot(data = df) + geom_line(aes(x = x, y = y1, col = "f1")) +
+   geom_line(aes(x = x, y = y2, col = "f2")) +
+   geom_line(aes(x = x, y = y3, col = "f3")) +
+   labs(y = "density") +
+   scale_color_discrete("functions")
ggplot(data = df) + geom_line(aes(x = x, y = y1, col = "f1")) +
geom_line(aes(x = x, y = y2, col = "f2")) +
geom_line(aes(x = x, y = y3, col = "f3")) +
labs(y = "density") +
scale_color_discrete("functions")
g <- function(x, mu = 67, sigma = 3) {
return(1/(sqrt(2*pi)*sigma) * exp(-1/(2*sigma^2) * (x-mu)^2))
}
alpha <- 0.5
plot(x_range, f3(x_range))
lines(g(x)/alpha)
alpha <- 0.5
plot(x_range, f3(x_range))
lines(g(x_range)/alpha)
plot(x_range, f3(x_range), type = "l")
lines(g(x_range))
g <- function(x, mu = 67, sigma = 3) {
return(1/(sqrt(2*pi)*sigma) * exp(-1/(2*sigma^2) * (x-mu)^2))
}
plot(x_range, f3(x_range), type = "l")
lines(g(x_range))
plot(x_range, g(x_range), type = "l")
plot(x_range, g(x_range), type = "l")
lines(g(x_range))
?lines
plot(x_range, g(x_range), type = "l")
lines(f3(x_range))
plot(x_range, g(x_range), type = "l")
points(f3(x_range))
f3(x_range)
plot(x_range, g(x_range), type = "l")
lines(f3(x_range))
plot(x_range, g(x_range), type = "l")
lines(y = f3(x_range))
plot(x_range, g(x_range), type = "l")
lines(x_range, y = f3(x_range))
?lines
plot(x_range, g(x_range)/alpha, type = "l")
lines(x_range, y = f3(x_range))
alpha <- 0.4
plot(x_range, g(x_range)/alpha, type = "l")
lines(x_range, y = f3(x_range))
alpha <- 0.4
xr <- seq(50, 80, 0.01)
plot(xr, g(xr)/alpha, type = "l")
lines(xr, y = f3(xr))
g <- function(x, mu = 67, sigma = 6) {
return(1/(sqrt(2*pi)*sigma) * exp(-1/(2*sigma^2) * (x-mu)^2))
}
alpha <- 0.4
xr <- seq(50, 80, 0.01)
plot(xr, g(xr)/alpha, type = "l")
lines(xr, y = f3(xr))
g <- function(x, mu = 67, sigma = 10) {
return(1/(sqrt(2*pi)*sigma) * exp(-1/(2*sigma^2) * (x-mu)^2))
}
alpha <- 0.4
xr <- seq(50, 80, 0.01)
plot(xr, g(xr)/alpha, type = "l")
lines(xr, y = f3(xr))
g <- function(x, mu = 67, sigma = 8) {
return(1/(sqrt(2*pi)*sigma) * exp(-1/(2*sigma^2) * (x-mu)^2))
}
alpha <- 0.4
xr <- seq(50, 80, 0.01)
plot(xr, g(xr)/alpha, type = "l")
lines(xr, y = f3(xr))
g <- function(x, mu = 67, sigma = 5) {
return(1/(sqrt(2*pi)*sigma) * exp(-1/(2*sigma^2) * (x-mu)^2))
}
alpha <- 0.4
xr <- seq(50, 80, 0.01)
plot(xr, g(xr)/alpha, type = "l")
lines(xr, y = f3(xr))
alpha <- 0.4
xr <- seq(40, 50, 0.01)
plot(xr, g(xr)/alpha, type = "l")
lines(xr, y = f3(xr))
alpha <- 0.4
xr <- seq(0, 20, 0.01)
plot(xr, g(xr)/alpha, type = "l")
lines(xr, y = f3(xr))
alpha <- 0.4
xr <- seq(0, 10, 0.01)
plot(xr, g(xr)/alpha, type = "l")
lines(xr, y = f3(xr))
alpha <- 0.4
xr <- seq(0, 10, 0.01)
plot(xr, g(xr)/alpha, type = "l", col = "red")
lines(xr, y = f3(xr))
alpha <- 0.4
xr <- seq(50, 80, 0.01)
plot(xr, g(xr)/alpha, type = "l", col = "red")
lines(xr, y = f3(xr))
alpha <- 0.4
xr <- seq(50, 80, 0.01)
plot(xr, g(xr)/alpha, type = "l", col = "red")
lines(xr, y = f3(xr))
legend(50, 0.2, c("g", "f3"), col = c("red", "black"))
alpha <- 0.4
xr <- seq(50, 80, 0.01)
plot(xr, g(xr)/alpha, type = "l", col = "red")
lines(xr, y = f3(xr))
legend(50, 0.2, c("g", "f3"), col = c("red", "black"), pch = c(19, 19))
g <- function(x, mu = 67, sigma = 4) {
return(1/(sqrt(2*pi)*sigma) * exp(-1/(2*sigma^2) * (x-mu)^2))
}
alpha <- 0.4
xr <- seq(50, 80, 0.01)
plot(xr, g(xr)/alpha, type = "l", col = "red")
lines(xr, y = f3(xr))
legend(50, 0.2, c("g", "f3"), col = c("red", "black"), pch = c(19, 19))
alpha <- 0.4
xr <- seq(50, 85, 0.01)
plot(xr, g(xr)/alpha, type = "l", col = "red")
lines(xr, y = f3(xr))
legend(50, 0.2, c("g", "f3"), col = c("red", "black"), pch = c(19, 19))
alpha <- 0.4
xr <- seq(50, 55, 0.01)
plot(xr, g(xr)/alpha, type = "l", col = "red")
lines(xr, y = f3(xr))
legend(50, 0.2, c("g", "f3"), col = c("red", "black"), pch = c(19, 19))
alpha <- 0.4
xr <- seq(50, 80, 0.01)
plot(xr, g(xr)/alpha, type = "l", col = "red")
lines(xr, y = f3(xr))
legend(50, 0.2, c("g", "f3"), col = c("red", "black"), pch = c(19, 19))
simu <- c()
i <- 0
while(i <= 10000) {
x <- rnorm(1, 67, 4)
y <- runif(1)
if(g(x)/alpha*y < f3(x)) {
simu <- c(simu, x)
i <- i+1
}
}
head(simu, 20)
hist(simu)
hist(simu, prob = T, breaks = 100)
hist(simu, prob = T)
lines(f3(seq(55, 85, 0.01)))
length(simu)
simu <- c()
i <- 0
while(i < 10000) {
x <- rnorm(1, 67, 4)
y <- runif(1)
if(g(x)/alpha*y < f3(x)) {
simu <- c(simu, x)
i <- i+1
}
}
head(simu, 20)
hist(simu, prob = T)
lines(f3(seq(55, 85, 0.01)))
glm.data <- read.table("https://netfiles.umn.edu/users/nacht001/www/nachtsheim/Kutner/Chapter%2014%20Data%20Sets/CH14PR39.txt")
glm.data <- read.table("CH14PR39.txt")
names(glm.data) <- c("Y","X1","X2","X3","X4")
head(glm.data)
pois.neg.ll <- function(y, X, beta) {
tmp <- t(X) %*% beta
term1 <- sum(y * tmp)
term2 <- sum(exp(tmp))
return(term2-term1)
}
pois.neg.ll(glm.data[, 1], cbind(rep(1, nrow(glm.data)), glm.data[, -1]), rep(0, 5))
pois.neg.ll <- function(y, X, beta) {
X <- as.matrix(X)
tmp <- t(X) %*% beta
term1 <- sum(y * tmp)
term2 <- sum(exp(tmp))
return(term2-term1)
}
pois.neg.ll(glm.data[, 1], cbind(rep(1, nrow(glm.data)), glm.data[, -1]), rep(0, 5))
pois.neg.ll <- function(y, X, beta) {
X <- as.matrix(X)
beta <- as.matrix(beta)
tmp <- t(X) %*% beta
term1 <- sum(y * tmp)
term2 <- sum(exp(tmp))
return(term2-term1)
}
pois.neg.ll(glm.data[, 1], cbind(rep(1, nrow(glm.data)), glm.data[, -1]), rep(0, 5))
pois.neg.ll(glm.data[, 1], cbind(rep(1, nrow(glm.data)), glm.data[, c(2:5)]), rep(0, 5))
cbind(rep(1, nrow(glm.data)), glm.data[, c(2:5)])
glm.data
as.matrix(cbind(rep(1, nrow(glm.data)), glm.data[, c(2:5)]))
as.matrix(cbind(rep(1, nrow(glm.data)), glm.data[, c(2:5)])) %*% rep(0, 5)
pois.neg.ll <- function(y, X, beta) {
tmp <- X %*% beta
term1 <- sum(y * tmp)
term2 <- sum(exp(tmp))
return(term2-term1)
}
pois.neg.ll(glm.data[, 1], cbind(rep(1, nrow(glm.data)), glm.data[, c(2:5)]), rep(0, 5))
pois.neg.ll <- function(y, X, beta) {
X <- as.matrix(X)
tmp <- X %*% beta
term1 <- sum(y * tmp)
term2 <- sum(exp(tmp))
return(term2-term1)
}
pois.neg.ll(glm.data[, 1], cbind(rep(1, nrow(glm.data)), glm.data[, c(2:5)]), rep(0, 5))
pois.neg.ll <- function(beta, y = glm.data[, 1], X=cbind(rep(1, nrow(glm.data)), glm.data[, c(2:5)])) {
X <- as.matrix(X)
tmp <- X %*% beta
term1 <- sum(y * tmp)
term2 <- sum(exp(tmp))
return(term2-term1)
}
pois.neg.ll(rep(0, 5))
nlm(pois.neg.ll, rep(0, 5))
glm(Y~X1+X2+X3+X4,data=glm.data,family="poisson")
train <- read.csv("finalexamtrain.csv")
head(train)
ggplot() + geom_point(train, aes(x = x, y = Y), col = "blue")
train <- read.csv("finalexamtrain.csv")
ggplot() + geom_point(train, aes(x = x, y = Y), col = "blue")
train <- read.csv("finalexamtrain.csv")
ggplot(train) + geom_point(aes(x = x, y = Y), col = "blue")
lm <- lm(Y ~ x, train)
lm1 <- lm(Y ~ poly(x, 1), train)
lm
lm1
lm1 <- lm(Y ~ x, train)
lm2 <- lm(Y ~ x + I(x^2), train)
lm3 <- lm(Y ~ x + I(x^2) + I(x^3), train)
lm4 <- lm(Y ~ x + I(x^2) + I(x^3) + I(x^4), train)
lm5 <- lm(Y ~ x + I(x^2) + I(x^3) + I(x^4) + I(x^5), train)
test.error <- function(df, mod) {
y.test1 <- predict(mod, newdata = df[df$ValSet == "TestSet1", ]["x"])
pred_err1 <- mean((y.test1 - df[df$ValSet == "TestSet1", ]["Y"])^2)
y.test2 <- predict(mod, newdata = df[df$ValSet == "TestSet2", ]["x"])
pred_err2 <- mean((y.test2 - df[df$ValSet == "TestSet1", ]["Y"])^2)
y.test3 <- predict(mod, newdata = df[df$ValSet == "TestSet1", ]["x"])
pred_err3 <- mean((y.test3 - df[df$ValSet == "TestSet3", ]["Y"])^2)
y.test4 <- predict(mod, newdata = df[df$ValSet == "TestSet1", ]["x"])
pred_err4 <- mean((y.test4 - df[df$ValSet == "TestSet4", ]["Y"])^2)
return(c(y.test1, y.test2, y.test3, y.test4))
}
data.test <- read.csv("finalexamtest.csv")
head(data.test)
tail(data.test)
levels(data.test$ValSet)
test.error(data.test, lm1)
test.error <- function(df, mod) {
y.test1 <- predict(mod, newdata = df[df$ValSet == "TestSet1", ]["x"])
pred_err1 <- mean((y.test1 - df[df$ValSet == "TestSet1", ]["Y"])^2)
y.test2 <- predict(mod, newdata = df[df$ValSet == "TestSet2", ]["x"])
pred_err2 <- mean((y.test2 - df[df$ValSet == "TestSet1", ]["Y"])^2)
y.test3 <- predict(mod, newdata = df[df$ValSet == "TestSet1", ]["x"])
pred_err3 <- mean((y.test3 - df[df$ValSet == "TestSet3", ]["Y"])^2)
y.test4 <- predict(mod, newdata = df[df$ValSet == "TestSet1", ]["x"])
pred_err4 <- mean((y.test4 - df[df$ValSet == "TestSet4", ]["Y"])^2)
return(c(pred_err1, pred_err2, pred_err3, pred_err4))
}
test.error(data.test, lm1)
y.test1 <- predict(lm1, newdata = data.test[data.test$ValSet == "TestSet1", ]["x"])
pred_err1 <- mean((y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"])^2)
pred_err1
data.test[data.test$ValSet == "TestSet1", ]
data.test[data.test$ValSet == "TestSet1", ]["x"]
data.test[data.test$ValSet == "TestSet1", ]["Y"]
y.test1
y.test - data.test[data.test$ValSet == "TestSet1", ]["Y"]
y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"]
mean(y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"])
mean(y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"])
sum(y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"])
length(y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"])
mean(as.numeric(y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"]))
y.test1 <- predict(lm1, newdata = data.test[data.test$ValSet == "TestSet1", ]["x"])
pred_err1 <- mean((y.test1 - as.vector(data.test[data.test$ValSet == "TestSet1", ]["Y"]))^2)
y.test1 <- predict(lm1, newdata = data.test[data.test$ValSet == "TestSet1", ]["x"])
pred_err1 <- mean((as.vector(y.test1) - as.vector(data.test[data.test$ValSet == "TestSet1", ]["Y"]))^2)
apply((y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"])^2, 2, mean)
sum(y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"]) / nrow(y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"])
sum((y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"])^2) / nrow(y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"])
test.error <- function(df, mod) {
y.test1 <- predict(mod, newdata = df[df$ValSet == "TestSet1", ]["x"])
pred_err1 <- apply((y.test1 - data.test[data.test$ValSet == "TestSet1", ]["Y"])^2, 2, mean)
y.test2 <- predict(mod, newdata = df[df$ValSet == "TestSet2", ]["x"])
pred_err2 <- apply((y.test2 - data.test[data.test$ValSet == "TestSet2", ]["Y"])^2, 2, mean)
y.test3 <- predict(mod, newdata = df[df$ValSet == "TestSet3", ]["x"])
pred_err3 <- apply((y.test3 - data.test[data.test$ValSet == "TestSet3", ]["Y"])^2, 2, mean)
y.test4 <- predict(mod, newdata = df[df$ValSet == "TestSet4", ]["x"])
pred_err4 <- apply((y.test4 - data.test[data.test$ValSet == "TestSet4", ]["Y"])^2, 2, mean)
return(c(pred_err1, pred_err2, pred_err3, pred_err4))
}
test.error(data.test, lm1)
g <- function(x, mu = 67, sigma = 4) {
return(1/(sqrt(2*pi)*sigma) * exp(-1/(2*sigma^2) * (x-mu)^2))
}
alpha <- 0.4
xr <- seq(50, 80, 0.01)
plot(xr, g(xr)/alpha, type = "l", col = "red")
lines(xr, y = f3(xr))
legend(50, 0.2, c("g", "f3"), col = c("red", "black"), pch = c(19, 19))
simu <- c()
i <- 0
while(i < 10000) {
x <- rnorm(1, 67, 4)
y <- runif(1)
if(g(x)/alpha*y < f3(x)) {
simu <- c(simu, x)
i <- i+1
}
}
hist(simu, prob = T)
hist(simu, prob = T, break = 50)
hist(simu, prob = T, breaks = 50)
hist(simu, prob = T, breaks = 50)
lines(f3(seq(55, 85, 0.01)))
hist(simu, prob = T, breaks = 100)
hist(simu, prob = T, breaks = 1000)
hist(simu, prob = T, breaks = 1000)
lines(f3(seq(55, 85, 0.01)))
hist(simu, prob = T, breaks = 1000)
lines(f3(seq(55, 85, 0.01)), col = "red")
hist(simu, prob = T, breaks = 10000)
lines(f3(seq(55, 85, 0.01)), col = "red")
hist(simu, prob = T, breaks = 100)
hist(simu, breaks = 100)
hist(simu, breaks = 100, probability = T)
hist(simu, breaks = 100, probability = T)
lines(seq(55, 85, 0.01), f3(seq(55, 85, 0.01)), col = "red")
hist(simu, probability = T)
lines(seq(55, 85, 0.01), f3(seq(55, 85, 0.01)), col = "red")
simu1 <- c()
j <- 1
k <- 1
while(i <= 10000) {
x <- rnorm(1, 67, 4)
y <- runif(1)
if(g(x)/alpha*y < f3(x)) {
simu1 <- c(simu, x)
k <- k+1
}
else {
j <- j+1
}
}
simu1 <- c()
j <- 1
k <- 1
while(k <= 10000) {
x <- rnorm(1, 67, 4)
y <- runif(1)
if(g(x)/alpha*y < f3(x)) {
simu1 <- c(simu, x)
k <- k+1
}
else {
j <- j+1
}
}
j/(j+k)
test.error <- function(df) {
y.test1 <- predict(lm1, newdata = df["x"])
pred_err1 <- apply((y.test1 - df["Y"])^2, 2, mean)
y.test2 <- predict(lm2, newdata = df["x"])
pred_err2 <- apply((y.test2 - df["Y"])^2, 2, mean)
y.test3 <- predict(lm3, newdata = df["x"])
pred_err3 <- apply((y.test3 - df["Y"])^2, 2, mean)
y.test4 <- predict(lm4, newdata = df["x"])
pred_err4 <- apply((y.test4 - df["Y"])^2, 2, mean)
y.test5 <- predict(lm5, newdata = df["x"])
pred_err5 <- apply((y.test5 - df["Y"])^2, 2, mean)
# y.test2 <- predict(mod, newdata = df[df$ValSet == "TestSet2", ]["x"])
# pred_err2 <- apply((y.test2 - data.test[data.test$ValSet == "TestSet2", ]["Y"])^2, 2, mean)
#
# y.test3 <- predict(mod, newdata = df[df$ValSet == "TestSet3", ]["x"])
# pred_err3 <- apply((y.test3 - data.test[data.test$ValSet == "TestSet3", ]["Y"])^2, 2, mean)
#
# y.test4 <- predict(mod, newdata = df[df$ValSet == "TestSet4", ]["x"])
# pred_err4 <- apply((y.test4 - data.test[data.test$ValSet == "TestSet4", ]["Y"])^2, 2, mean)
return(pred_err1, pred_err2, pred_err3, pred_err4, pred_err5)
}
library("plyr")
daply(data.test, .ValSet, test.error)
library("plyr")
daply(data.test, "ValSet", test.error)
test.error <- function(df) {
y.test1 <- predict(lm1, newdata = df["x"])
pred_err1 <- apply((y.test1 - df["Y"])^2, 2, mean)
y.test2 <- predict(lm2, newdata = df["x"])
pred_err2 <- apply((y.test2 - df["Y"])^2, 2, mean)
y.test3 <- predict(lm3, newdata = df["x"])
pred_err3 <- apply((y.test3 - df["Y"])^2, 2, mean)
y.test4 <- predict(lm4, newdata = df["x"])
pred_err4 <- apply((y.test4 - df["Y"])^2, 2, mean)
y.test5 <- predict(lm5, newdata = df["x"])
pred_err5 <- apply((y.test5 - df["Y"])^2, 2, mean)
# y.test2 <- predict(mod, newdata = df[df$ValSet == "TestSet2", ]["x"])
# pred_err2 <- apply((y.test2 - data.test[data.test$ValSet == "TestSet2", ]["Y"])^2, 2, mean)
#
# y.test3 <- predict(mod, newdata = df[df$ValSet == "TestSet3", ]["x"])
# pred_err3 <- apply((y.test3 - data.test[data.test$ValSet == "TestSet3", ]["Y"])^2, 2, mean)
#
# y.test4 <- predict(mod, newdata = df[df$ValSet == "TestSet4", ]["x"])
# pred_err4 <- apply((y.test4 - data.test[data.test$ValSet == "TestSet4", ]["Y"])^2, 2, mean)
return(c(pred_err1, pred_err2, pred_err3, pred_err4, pred_err5))
}
library("plyr")
daply(data.test, "ValSet", test.error)
dlply(data.test, "ValSet", test.error)
res <- dlply(data.test, "ValSet", test.error)
res <- dlply(data.test, "ValSet", test.error)
plot(1:5, res[[1]])
points(1:5, res[[2]])
points(1:5, res[[3]])
points(1:5, res[[4]])
points(1:5, test.error(train))
plot(1:5, res[[1]], type = "l")
lines(1:5, res[[2]])
lines(1:5, res[[3]])
lines(1:5, res[[4]])
lines(1:5, test.error(train))
plot(1:5, res[[1]], type = "l", ylim = c(2000, 3600))
lines(1:5, res[[2]])
lines(1:5, res[[3]])
lines(1:5, res[[4]])
lines(1:5, test.error(train))
plot(1:5, res[[1]], type = "l", ylim = c(0, 3600))
lines(1:5, res[[2]])
lines(1:5, res[[3]])
lines(1:5, res[[4]])
lines(1:5, test.error(train))
plot(1:5, res[[1]], type = "l", ylim = c(1000, 3600))
lines(1:5, res[[2]])
lines(1:5, res[[3]])
lines(1:5, res[[4]])
lines(1:5, test.error(train))
plot(1:5, res[[1]], type = "l", ylim = c(1500, 3600))
lines(1:5, res[[2]])
lines(1:5, res[[3]])
lines(1:5, res[[4]])
lines(1:5, test.error(train))
plot(1:5, res[[1]], type = "l", ylim = c(1500, 3600), ylab = "error", xlab = "degree")
lines(1:5, res[[2]])
lines(1:5, res[[3]])
lines(1:5, res[[4]])
lines(1:5, test.error(train))
ddply(data.test, "ValSet", test.error)
res <- ddply(data.test, "ValSet", test.error)
res <- apply(res[2:6], 2, mean)
plot(1:5, res, type = "l", ylim = c(1500, 3600), ylab = "error", xlab = "degree")
lines(1:5, test.error(train))
plot(1:5, res, type = "l", ylim = c(2000, 3600), ylab = "error", xlab = "degree")
lines(1:5, test.error(train))
